
Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e6  00800060  00003d80  00003e14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800246  00800246  00003ffa  2**0
                  ALLOC
  3 .stab         00003c0c  00000000  00000000  00003ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001637  00000000  00000000  00007c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000923f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  000093df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  000095d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  0000b7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  0000caa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000dbd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  0000dd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000e06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e9c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__vector_1>
       8:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 58 1d 	jmp	0x3ab0	; 0x3ab0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 35       	cpi	r26, 0x5F	; 95
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 11 	call	0x231a	; 0x231a <main>
      8a:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ec       	ldi	r26, 0xC6	; 198
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 1e 	jmp	0x3caa	; 0x3caa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ec       	ldi	r24, 0xC6	; 198
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 1e 	jmp	0x3caa	; 0x3caa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 49 1e 	jmp	0x3c92	; 0x3c92 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e2 53       	subi	r30, 0x32	; 50
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <UART_init>:
#include"../../UTILS/BIT_MATH.h"
#include"UART_INTERFACE.h"
#include"UART_REG.h"
#include"../../HAL/CLCD1602/CLCD_INTERFACE.h"

void UART_init() {
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62

	/*Character Select*/
	CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     d9c:	aa e2       	ldi	r26, 0x2A	; 42
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e2       	ldi	r30, 0x2A	; 42
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	u8 UCRSC = 0;
     daa:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCRSC, UCSRC_UCSZ0);
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCRSC, UCSRC_UCSZ1);
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	84 60       	ori	r24, 0x04	; 4
     db6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCRSC, UCSRC_URSEL);
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	80 68       	ori	r24, 0x80	; 128
     dbc:	89 83       	std	Y+1, r24	; 0x01
	UCSRC_REG = UCRSC;
     dbe:	e0 e4       	ldi	r30, 0x40	; 64
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	80 83       	st	Z, r24
	/*Baud rate 9600*/
	UBRRL_REG = 51;
     dc6:	e9 e2       	ldi	r30, 0x29	; 41
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	83 e3       	ldi	r24, 0x33	; 51
     dcc:	80 83       	st	Z, r24
	/*Rx and Tx enable*/
	SET_BIT(UCSRB_REG, UCSRB_TXEN);
     dce:	aa e2       	ldi	r26, 0x2A	; 42
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	ea e2       	ldi	r30, 0x2A	; 42
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	88 60       	ori	r24, 0x08	; 8
     dda:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
     ddc:	aa e2       	ldi	r26, 0x2A	; 42
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ea e2       	ldi	r30, 0x2A	; 42
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	80 61       	ori	r24, 0x10	; 16
     de8:	8c 93       	st	X, r24
	/*interrupt enable*/
	//SET_BIT(UCSRB_REG, UCSRB_RXCIE);
	//SET_BIT(UCSRB_REG, UCSRB_TXCIE);
}
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <UART_Receive>:

u8 UART_Receive() {
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	0f 92       	push	r0
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA_REG,UCSRA_RXC) == 0)
     dfc:	eb e2       	ldi	r30, 0x2B	; 43
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
		;
	return UDR_REG;
     e02:	ec e2       	ldi	r30, 0x2C	; 44
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z

}
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <UART_Send>:
void UART_Send(u8 data) {
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <UART_Send+0x6>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA_REG,UCSRA_UDRE) == 0)
     e1c:	eb e2       	ldi	r30, 0x2B	; 43
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
		;
	UDR_REG = data;
     e22:	ec e2       	ldi	r30, 0x2C	; 44
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	80 83       	st	Z, r24
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <UART_RXFlAG_down>:
void UART_RXFlAG_down() {
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA_REG, UCSRA_RXC);
     e3c:	ab e2       	ldi	r26, 0x2B	; 43
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	eb e2       	ldi	r30, 0x2B	; 43
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	80 68       	ori	r24, 0x80	; 128
     e48:	8c 93       	st	X, r24
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <UART_Receive_String>:

void UART_Receive_String(char* arr) {
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <UART_Receive_String+0x6>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <UART_Receive_String+0x8>
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	9d 83       	std	Y+5, r25	; 0x05
     e60:	8c 83       	std	Y+4, r24	; 0x04
	char ca;
	for (u8 j = 0; j < 5; j++) {
     e62:	1a 82       	std	Y+2, r1	; 0x02
     e64:	19 c0       	rjmp	.+50     	; 0xe98 <UART_Receive_String+0x48>
		ca = UART_Receive();
     e66:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <UART_Receive>
     e6a:	8b 83       	std	Y+3, r24	; 0x03
		if (ca >= '1' && ca <= 'z') {
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	81 33       	cpi	r24, 0x31	; 49
     e70:	80 f0       	brcs	.+32     	; 0xe92 <UART_Receive_String+0x42>
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	8b 37       	cpi	r24, 0x7B	; 123
     e76:	68 f4       	brcc	.+26     	; 0xe92 <UART_Receive_String+0x42>
			LCD8Bit_Send_Data(ca);
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD8Bit_Send_Data>
			arr[j] = ca;
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	fc 01       	movw	r30, r24
     e8a:	e2 0f       	add	r30, r18
     e8c:	f3 1f       	adc	r31, r19
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	80 83       	st	Z, r24
	SET_BIT(UCSRA_REG, UCSRA_RXC);
}

void UART_Receive_String(char* arr) {
	char ca;
	for (u8 j = 0; j < 5; j++) {
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	8a 83       	std	Y+2, r24	; 0x02
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	20 f3       	brcs	.-56     	; 0xe66 <UART_Receive_String+0x16>
		if (ca >= '1' && ca <= 'z') {
			LCD8Bit_Send_Data(ca);
			arr[j] = ca;
		}
	}
	if (ca == '*') {
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	8a 32       	cpi	r24, 0x2A	; 42
     ea2:	99 f4       	brne	.+38     	; 0xeca <UART_Receive_String+0x7a>
		for (u8 k = 0;k < 4; k++)
     ea4:	19 82       	std	Y+1, r1	; 0x01
     ea6:	0e c0       	rjmp	.+28     	; 0xec4 <UART_Receive_String+0x74>
			LCD8Bit_Send_Data(arr[k]);
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	fc 01       	movw	r30, r24
     eb4:	e2 0f       	add	r30, r18
     eb6:	f3 1f       	adc	r31, r19
     eb8:	80 81       	ld	r24, Z
     eba:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD8Bit_Send_Data>
			LCD8Bit_Send_Data(ca);
			arr[j] = ca;
		}
	}
	if (ca == '*') {
		for (u8 k = 0;k < 4; k++)
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	8f 5f       	subi	r24, 0xFF	; 255
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	78 f3       	brcs	.-34     	; 0xea8 <UART_Receive_String+0x58>
			LCD8Bit_Send_Data(arr[k]);

	}

}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <UART_disable>:
void UART_disable() {
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB_REG, UCSRB_RXEN);
     ee2:	aa e2       	ldi	r26, 0x2A	; 42
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea e2       	ldi	r30, 0x2A	; 42
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8f 7e       	andi	r24, 0xEF	; 239
     eee:	8c 93       	st	X, r24
}
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <UART_enable>:
void UART_enable() {
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
     efe:	aa e2       	ldi	r26, 0x2A	; 42
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ea e2       	ldi	r30, 0x2A	; 42
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 61       	ori	r24, 0x10	; 16
     f0a:	8c 93       	st	X, r24

}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <Timer0_init>:
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATH.h"
#include"TIMER_INTERFACE.h"
#include"TIMER_REG.h"

void Timer0_init(){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM TIMER MODE*/
   SET_BIT(TCCR0_REG,TCCR0_WGM00);
     f1a:	a3 e5       	ldi	r26, 0x53	; 83
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e3 e5       	ldi	r30, 0x53	; 83
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 64       	ori	r24, 0x40	; 64
     f26:	8c 93       	st	X, r24
   SET_BIT(TCCR0_REG,TCCR0_WGM01);
     f28:	a3 e5       	ldi	r26, 0x53	; 83
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e3 e5       	ldi	r30, 0x53	; 83
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	88 60       	ori	r24, 0x08	; 8
     f34:	8c 93       	st	X, r24

   /*Non inverting PWM */
   CLR_BIT(TCCR0_REG,TCCR0_COM00);
     f36:	a3 e5       	ldi	r26, 0x53	; 83
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e3 e5       	ldi	r30, 0x53	; 83
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8f 7e       	andi	r24, 0xEF	; 239
     f42:	8c 93       	st	X, r24
   SET_BIT(TCCR0_REG,TCCR0_COM01);
     f44:	a3 e5       	ldi	r26, 0x53	; 83
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e3 e5       	ldi	r30, 0x53	; 83
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 62       	ori	r24, 0x20	; 32
     f50:	8c 93       	st	X, r24

   /*Prescaler Clock Select*/
   CLR_BIT(TCCR0_REG,TCCR0_CS00);
     f52:	a3 e5       	ldi	r26, 0x53	; 83
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e3 e5       	ldi	r30, 0x53	; 83
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	8c 93       	st	X, r24
   SET_BIT(TCCR0_REG,TCCR0_CS01);
     f60:	a3 e5       	ldi	r26, 0x53	; 83
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e3 e5       	ldi	r30, 0x53	; 83
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	8c 93       	st	X, r24
   CLR_BIT(TCCR0_REG,TCCR0_CS02);
     f6e:	a3 e5       	ldi	r26, 0x53	; 83
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e3 e5       	ldi	r30, 0x53	; 83
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8b 7f       	andi	r24, 0xFB	; 251
     f7a:	8c 93       	st	X, r24


}
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <Timer1_init>:

void Timer1_init(){
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM Mode ICR1*/
	CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     f8a:	af e4       	ldi	r26, 0x4F	; 79
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ef e4       	ldi	r30, 0x4F	; 79
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8e 7f       	andi	r24, 0xFE	; 254
     f96:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
     f98:	af e4       	ldi	r26, 0x4F	; 79
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ef e4       	ldi	r30, 0x4F	; 79
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
     fa6:	ae e4       	ldi	r26, 0x4E	; 78
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ee e4       	ldi	r30, 0x4E	; 78
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	88 60       	ori	r24, 0x08	; 8
     fb2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
     fb4:	ae e4       	ldi	r26, 0x4E	; 78
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ee e4       	ldi	r30, 0x4E	; 78
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	80 61       	ori	r24, 0x10	; 16
     fc0:	8c 93       	st	X, r24
    /*interrupt enable*/
	//SET_BIT(TIMSK_REG,TIMSK_TOIE1);
	//SET_BIT(TIMSK_REG,TIMSK_OCIE1A);

	/*Mode Fast PWM on OCR1A NON-inverting */
	CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
     fc2:	af e4       	ldi	r26, 0x4F	; 79
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ef e4       	ldi	r30, 0x4F	; 79
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8f 7b       	andi	r24, 0xBF	; 191
     fce:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
     fd0:	af e4       	ldi	r26, 0x4F	; 79
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ef e4       	ldi	r30, 0x4F	; 79
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	8c 93       	st	X, r24
    ICR1L_REG = 20000;
     fde:	e6 e4       	ldi	r30, 0x46	; 70
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 e2       	ldi	r24, 0x20	; 32
     fe4:	9e e4       	ldi	r25, 0x4E	; 78
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	80 83       	st	Z, r24
	/*Prescaler = 8*/
	CLR_BIT(TCCR1B_REG,TCCR1B_CS10);
     fea:	ae e4       	ldi	r26, 0x4E	; 78
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ee e4       	ldi	r30, 0x4E	; 78
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_CS11);
     ff8:	ae e4       	ldi	r26, 0x4E	; 78
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ee e4       	ldi	r30, 0x4E	; 78
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	82 60       	ori	r24, 0x02	; 2
    1004:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
    1006:	ae e4       	ldi	r26, 0x4E	; 78
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ee e4       	ldi	r30, 0x4E	; 78
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8b 7f       	andi	r24, 0xFB	; 251
    1012:	8c 93       	st	X, r24





	}
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <Timer2_init>:
	
void Timer2_init(){
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
   /*Fast PWM TIMER MODE*/
   SET_BIT(TCCR2_REG,TCCR2_WGM20);
    1022:	a5 e4       	ldi	r26, 0x45	; 69
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e5 e4       	ldi	r30, 0x45	; 69
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	80 64       	ori	r24, 0x40	; 64
    102e:	8c 93       	st	X, r24
   SET_BIT(TCCR2_REG,TCCR2_WGM21);
    1030:	a5 e4       	ldi	r26, 0x45	; 69
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e5 e4       	ldi	r30, 0x45	; 69
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	88 60       	ori	r24, 0x08	; 8
    103c:	8c 93       	st	X, r24
   /*PWM Timer Mode*/
   // SET_BIT(TIMSK_REG,TIMSK_TOIE0);
   //SET_BIT(TIMSK_REG,TIMSK_OCIE0);

   /*PWM */
   CLR_BIT(TCCR2_REG,TCCR2_COM20);
    103e:	a5 e4       	ldi	r26, 0x45	; 69
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e4       	ldi	r30, 0x45	; 69
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8f 7e       	andi	r24, 0xEF	; 239
    104a:	8c 93       	st	X, r24
   SET_BIT(TCCR2_REG,TCCR2_COM21);
    104c:	a5 e4       	ldi	r26, 0x45	; 69
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e4       	ldi	r30, 0x45	; 69
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 62       	ori	r24, 0x20	; 32
    1058:	8c 93       	st	X, r24
   /*compare match output register*/
   //OCR0_REG = 0;


   /*Prescaler Clock Select*/
   CLR_BIT(TCCR2_REG,TCCR2_CS20);
    105a:	a5 e4       	ldi	r26, 0x45	; 69
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e5 e4       	ldi	r30, 0x45	; 69
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8e 7f       	andi	r24, 0xFE	; 254
    1066:	8c 93       	st	X, r24
   SET_BIT(TCCR2_REG,TCCR2_CS21);
    1068:	a5 e4       	ldi	r26, 0x45	; 69
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e4       	ldi	r30, 0x45	; 69
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	82 60       	ori	r24, 0x02	; 2
    1074:	8c 93       	st	X, r24
   CLR_BIT(TCCR2_REG,TCCR2_CS22);
    1076:	a5 e4       	ldi	r26, 0x45	; 69
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e4       	ldi	r30, 0x45	; 69
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8b 7f       	andi	r24, 0xFB	; 251
    1082:	8c 93       	st	X, r24


}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <SET_TCNT0>:
void SET_TCNT0(u8 value){
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG = value;
    1096:	e2 e5       	ldi	r30, 0x52	; 82
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	80 83       	st	Z, r24
}
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <SET_OCR0>:
void SET_OCR0(u8 value){
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG = value;
    10b2:	ec e5       	ldi	r30, 0x5C	; 92
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	80 83       	st	Z, r24
}
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <SET_TCNT2>:
void SET_TCNT2(u8 value){
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	0f 92       	push	r0
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_REG = value;
    10ce:	e4 e4       	ldi	r30, 0x44	; 68
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	80 83       	st	Z, r24
}
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <SET_OCR2>:
void SET_OCR2(u8 value){
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	0f 92       	push	r0
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	89 83       	std	Y+1, r24	; 0x01
	OCR2_REG = value;
    10ea:	e3 e4       	ldi	r30, 0x43	; 67
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	80 83       	st	Z, r24
}
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <SET_TCNT1>:
void SET_TCNT1(u16 value){
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <SET_TCNT1+0x6>
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L_REG = value;
    1108:	ec e4       	ldi	r30, 0x4C	; 76
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <SET_OCR1A>:
void SET_OCR1A(u16 value){
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <SET_OCR1A+0x6>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL_REG = value;
    112c:	ea e4       	ldi	r30, 0x4A	; 74
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	80 83       	st	Z, r24
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <SET_OCR1B>:
void SET_OCR1B(u16 value){
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <SET_OCR1B+0x6>
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL_REG = value;
    1150:	e8 e4       	ldi	r30, 0x48	; 72
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	80 83       	st	Z, r24
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <SPI_Master_init>:
 */
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATh.h"
#include "../SPI/SPI_INTERFACE.h"
#include "../SPI/SPI_REG.h"
void SPI_Master_init(){
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62

	//Clock frequency select
	SET_BIT(SPCR_REG,SPCR_SPR0);
    116e:	ad e2       	ldi	r26, 0x2D	; 45
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ed e2       	ldi	r30, 0x2D	; 45
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	81 60       	ori	r24, 0x01	; 1
    117a:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,SPCR_SPR1);
    117c:	ad e2       	ldi	r26, 0x2D	; 45
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	ed e2       	ldi	r30, 0x2D	; 45
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	8d 7f       	andi	r24, 0xFD	; 253
    1188:	8c 93       	st	X, r24
	SET_BIT(SPSR_REG,SPSR_SPR2x);
    118a:	ae e2       	ldi	r26, 0x2E	; 46
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ee e2       	ldi	r30, 0x2E	; 46
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	81 60       	ori	r24, 0x01	; 1
    1196:	8c 93       	st	X, r24
    //Master Select
	SET_BIT(SPCR_REG,SPCR_MSTR);
    1198:	ad e2       	ldi	r26, 0x2D	; 45
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	ed e2       	ldi	r30, 0x2D	; 45
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	80 61       	ori	r24, 0x10	; 16
    11a4:	8c 93       	st	X, r24
	//SPI Enable
	SET_BIT(SPCR_REG,SPCR_SPE);
    11a6:	ad e2       	ldi	r26, 0x2D	; 45
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ed e2       	ldi	r30, 0x2D	; 45
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	80 64       	ori	r24, 0x40	; 64
    11b2:	8c 93       	st	X, r24
}
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <SPI_Slave_init>:
void SPI_Slave_init(){
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62


    //Master Select
	CLR_BIT(SPCR_REG,SPCR_MSTR);
    11c2:	ad e2       	ldi	r26, 0x2D	; 45
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	ed e2       	ldi	r30, 0x2D	; 45
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 7e       	andi	r24, 0xEF	; 239
    11ce:	8c 93       	st	X, r24
	//SPI Enable
	SET_BIT(SPCR_REG,SPCR_SPE);
    11d0:	ad e2       	ldi	r26, 0x2D	; 45
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ed e2       	ldi	r30, 0x2D	; 45
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	80 64       	ori	r24, 0x40	; 64
    11dc:	8c 93       	st	X, r24
}
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <SPI_Transive>:
u8 SPI_Transive(u8 data){
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <SPI_Transive+0x6>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	89 83       	std	Y+1, r24	; 0x01
	SPDR_REG = data;
    11f0:	ef e2       	ldi	r30, 0x2F	; 47
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	80 83       	st	Z, r24
	while(GET_BIT(SPSR_REG,SPSR_SPIF)==0);
    11f8:	ee e2       	ldi	r30, 0x2E	; 46
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
	return SPDR_REG;
    11fe:	ef e2       	ldi	r30, 0x2F	; 47
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z

}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <Globle_Intrrupt_Enable>:
#include"../../UTILS/BIT_MATH.h"
#include "GIE_INTERFACE.h"
#include"GIE_REG.h"


void Globle_Intrrupt_Enable(){
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG_REG,7);
    1216:	af e5       	ldi	r26, 0x5F	; 95
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ef e5       	ldi	r30, 0x5F	; 95
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 68       	ori	r24, 0x80	; 128
    1222:	8c 93       	st	X, r24

}
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <Globle_Intrrupt_Disable>:

void Globle_Intrrupt_Disable(){
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG_REG,7);
    1232:	af e5       	ldi	r26, 0x5F	; 95
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ef e5       	ldi	r30, 0x5F	; 95
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8f 77       	andi	r24, 0x7F	; 127
    123e:	8c 93       	st	X, r24

}
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <INT0_init>:
#include "EXT_INTERRUPT_CONFIG.h"
#include "../../UTILS/STD_TYPES.h"
#include "../../UTILS/BIT_MATH.h"
#include "EXT_INTERRUPT_INTERFACE.h"

INT0_init() {
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62

	//Sense Control for INT0
#if INT0_Sense_Control == Rising_Edge
	SET_BIT(MCUCR_REG, ISC00);
    124e:	a5 e5       	ldi	r26, 0x55	; 85
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e5       	ldi	r30, 0x55	; 85
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG, ISC01);
    125c:	a5 e5       	ldi	r26, 0x55	; 85
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e5       	ldi	r30, 0x55	; 85
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	82 60       	ori	r24, 0x02	; 2
    1268:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,ISC01);
#endif

	//Specific Interrupt Enable

	SET_BIT(GICR_REG, GICR_INT0);
    126a:	ab e5       	ldi	r26, 0x5B	; 91
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	eb e5       	ldi	r30, 0x5B	; 91
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 64       	ori	r24, 0x40	; 64
    1276:	8c 93       	st	X, r24

}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <INT1_init>:

INT1_init() {
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62

	//Sense Control for INT1
#if INT0_Sense_Control == Rising_Edge
	SET_BIT(MCUCR_REG, ISC10);
    1286:	a5 e5       	ldi	r26, 0x55	; 85
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e5       	ldi	r30, 0x55	; 85
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	84 60       	ori	r24, 0x04	; 4
    1292:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG, ISC11);
    1294:	a5 e5       	ldi	r26, 0x55	; 85
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e5 e5       	ldi	r30, 0x55	; 85
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	88 60       	ori	r24, 0x08	; 8
    12a0:	8c 93       	st	X, r24
#endif


	//Specific Interrupt Enable

	SET_BIT(GICR_REG, GICR_INT1);
    12a2:	ab e5       	ldi	r26, 0x5B	; 91
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	eb e5       	ldi	r30, 0x5B	; 91
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	80 68       	ori	r24, 0x80	; 128
    12ae:	8c 93       	st	X, r24

}
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <INT2_init>:

INT2_init() {
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62

	//Sense Control for INT0
#if INT0_Sense_Control == Rising_Edge
	SET_BIT(MCUCSR_REG, ISC2);
    12be:	a4 e5       	ldi	r26, 0x54	; 84
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e4 e5       	ldi	r30, 0x54	; 84
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 64       	ori	r24, 0x40	; 64
    12ca:	8c 93       	st	X, r24



	//Specific Interrupt Enable

	SET_BIT(GICR_REG, GICR_INT2);
    12cc:	ab e5       	ldi	r26, 0x5B	; 91
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	eb e5       	ldi	r30, 0x5B	; 91
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	80 62       	ori	r24, 0x20	; 32
    12d8:	8c 93       	st	X, r24

}
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <DIO_SetPin_Value>:
 */
#include "DIO_INTERFACE.H"



void DIO_SetPin_Value(u8 u8_port, u8 u8_pin, u8 value) {
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	27 97       	sbiw	r28, 0x07	; 7
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	6a 83       	std	Y+2, r22	; 0x02
    12f8:	4b 83       	std	Y+3, r20	; 0x03
	if (value == HIGH) {
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	09 f0       	breq	.+2      	; 0x1302 <DIO_SetPin_Value+0x22>
    1300:	6f c0       	rjmp	.+222    	; 0x13e0 <DIO_SetPin_Value+0x100>
		switch (u8_port) {
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3f 83       	std	Y+7, r19	; 0x07
    130a:	2e 83       	std	Y+6, r18	; 0x06
    130c:	8e 81       	ldd	r24, Y+6	; 0x06
    130e:	9f 81       	ldd	r25, Y+7	; 0x07
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	91 05       	cpc	r25, r1
    1314:	49 f1       	breq	.+82     	; 0x1368 <DIO_SetPin_Value+0x88>
    1316:	2e 81       	ldd	r18, Y+6	; 0x06
    1318:	3f 81       	ldd	r19, Y+7	; 0x07
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	2c f4       	brge	.+10     	; 0x132a <DIO_SetPin_Value+0x4a>
    1320:	8e 81       	ldd	r24, Y+6	; 0x06
    1322:	9f 81       	ldd	r25, Y+7	; 0x07
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	61 f0       	breq	.+24     	; 0x1340 <DIO_SetPin_Value+0x60>
    1328:	d2 c0       	rjmp	.+420    	; 0x14ce <DIO_SetPin_Value+0x1ee>
    132a:	2e 81       	ldd	r18, Y+6	; 0x06
    132c:	3f 81       	ldd	r19, Y+7	; 0x07
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	71 f1       	breq	.+92     	; 0x1390 <DIO_SetPin_Value+0xb0>
    1334:	8e 81       	ldd	r24, Y+6	; 0x06
    1336:	9f 81       	ldd	r25, Y+7	; 0x07
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	91 05       	cpc	r25, r1
    133c:	e9 f1       	breq	.+122    	; 0x13b8 <DIO_SetPin_Value+0xd8>
    133e:	c7 c0       	rjmp	.+398    	; 0x14ce <DIO_SetPin_Value+0x1ee>
		case GroupA:
			SET_BIT(PORTA_REG, u8_pin);
    1340:	ab e3       	ldi	r26, 0x3B	; 59
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	eb e3       	ldi	r30, 0x3B	; 59
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_SetPin_Value+0x7e>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_SetPin_Value+0x7a>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	b3 c0       	rjmp	.+358    	; 0x14ce <DIO_SetPin_Value+0x1ee>
			break;
		case GroupB:
			SET_BIT(PORTB_REG, u8_pin);
    1368:	a8 e3       	ldi	r26, 0x38	; 56
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e8 e3       	ldi	r30, 0x38	; 56
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_SetPin_Value+0xa6>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_SetPin_Value+0xa2>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	9f c0       	rjmp	.+318    	; 0x14ce <DIO_SetPin_Value+0x1ee>
			break;
		case GroupC:
			SET_BIT(PORTC_REG, u8_pin);
    1390:	a5 e3       	ldi	r26, 0x35	; 53
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e5 e3       	ldi	r30, 0x35	; 53
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_SetPin_Value+0xce>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_SetPin_Value+0xca>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	8b c0       	rjmp	.+278    	; 0x14ce <DIO_SetPin_Value+0x1ee>
			break;
		case GroupD:
			SET_BIT(PORTD_REG, u8_pin);
    13b8:	a2 e3       	ldi	r26, 0x32	; 50
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e2 e3       	ldi	r30, 0x32	; 50
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_SetPin_Value+0xf6>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_SetPin_Value+0xf2>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	77 c0       	rjmp	.+238    	; 0x14ce <DIO_SetPin_Value+0x1ee>
			break;

		}

	}
	else if (value == LOW) {
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	88 23       	and	r24, r24
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <DIO_SetPin_Value+0x108>
    13e6:	73 c0       	rjmp	.+230    	; 0x14ce <DIO_SetPin_Value+0x1ee>
		switch (u8_port) {
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3d 83       	std	Y+5, r19	; 0x05
    13f0:	2c 83       	std	Y+4, r18	; 0x04
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	59 f1       	breq	.+86     	; 0x1452 <DIO_SetPin_Value+0x172>
    13fc:	2c 81       	ldd	r18, Y+4	; 0x04
    13fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1400:	22 30       	cpi	r18, 0x02	; 2
    1402:	31 05       	cpc	r19, r1
    1404:	2c f4       	brge	.+10     	; 0x1410 <DIO_SetPin_Value+0x130>
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	9d 81       	ldd	r25, Y+5	; 0x05
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	69 f0       	breq	.+26     	; 0x1428 <DIO_SetPin_Value+0x148>
    140e:	5f c0       	rjmp	.+190    	; 0x14ce <DIO_SetPin_Value+0x1ee>
    1410:	2c 81       	ldd	r18, Y+4	; 0x04
    1412:	3d 81       	ldd	r19, Y+5	; 0x05
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	31 05       	cpc	r19, r1
    1418:	89 f1       	breq	.+98     	; 0x147c <DIO_SetPin_Value+0x19c>
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	9d 81       	ldd	r25, Y+5	; 0x05
    141e:	83 30       	cpi	r24, 0x03	; 3
    1420:	91 05       	cpc	r25, r1
    1422:	09 f4       	brne	.+2      	; 0x1426 <DIO_SetPin_Value+0x146>
    1424:	40 c0       	rjmp	.+128    	; 0x14a6 <DIO_SetPin_Value+0x1c6>
    1426:	53 c0       	rjmp	.+166    	; 0x14ce <DIO_SetPin_Value+0x1ee>
		case GroupA:
			CLR_BIT(PORTA_REG, u8_pin);
    1428:	ab e3       	ldi	r26, 0x3B	; 59
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	eb e3       	ldi	r30, 0x3B	; 59
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_SetPin_Value+0x166>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_SetPin_Value+0x162>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	3e c0       	rjmp	.+124    	; 0x14ce <DIO_SetPin_Value+0x1ee>
			break;
		case GroupB:
			CLR_BIT(PORTB_REG, u8_pin);
    1452:	a8 e3       	ldi	r26, 0x38	; 56
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e8 e3       	ldi	r30, 0x38	; 56
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_SetPin_Value+0x190>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_SetPin_Value+0x18c>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	29 c0       	rjmp	.+82     	; 0x14ce <DIO_SetPin_Value+0x1ee>
			break;
		case GroupC:
			CLR_BIT(PORTC_REG, u8_pin);
    147c:	a5 e3       	ldi	r26, 0x35	; 53
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e3       	ldi	r30, 0x35	; 53
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_SetPin_Value+0x1ba>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_SetPin_Value+0x1b6>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <DIO_SetPin_Value+0x1ee>
			break;
		case GroupD:
			CLR_BIT(PORTD_REG, u8_pin);
    14a6:	a2 e3       	ldi	r26, 0x32	; 50
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e2 e3       	ldi	r30, 0x32	; 50
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_SetPin_Value+0x1e4>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_SetPin_Value+0x1e0>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24
			break;
		}
	}
}
    14ce:	27 96       	adiw	r28, 0x07	; 7
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <DIO_SetPin_Direction>:





void DIO_SetPin_Direction(u8 u8_port, u8 u8_pin, u8 direction) {
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	27 97       	sbiw	r28, 0x07	; 7
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	6a 83       	std	Y+2, r22	; 0x02
    14f8:	4b 83       	std	Y+3, r20	; 0x03
	if (direction == OUTPUT) {
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	09 f0       	breq	.+2      	; 0x1502 <DIO_SetPin_Direction+0x22>
    1500:	6f c0       	rjmp	.+222    	; 0x15e0 <DIO_SetPin_Direction+0x100>
		switch (u8_port) {
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3f 83       	std	Y+7, r19	; 0x07
    150a:	2e 83       	std	Y+6, r18	; 0x06
    150c:	8e 81       	ldd	r24, Y+6	; 0x06
    150e:	9f 81       	ldd	r25, Y+7	; 0x07
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	49 f1       	breq	.+82     	; 0x1568 <DIO_SetPin_Direction+0x88>
    1516:	2e 81       	ldd	r18, Y+6	; 0x06
    1518:	3f 81       	ldd	r19, Y+7	; 0x07
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	2c f4       	brge	.+10     	; 0x152a <DIO_SetPin_Direction+0x4a>
    1520:	8e 81       	ldd	r24, Y+6	; 0x06
    1522:	9f 81       	ldd	r25, Y+7	; 0x07
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	61 f0       	breq	.+24     	; 0x1540 <DIO_SetPin_Direction+0x60>
    1528:	d2 c0       	rjmp	.+420    	; 0x16ce <DIO_SetPin_Direction+0x1ee>
    152a:	2e 81       	ldd	r18, Y+6	; 0x06
    152c:	3f 81       	ldd	r19, Y+7	; 0x07
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	71 f1       	breq	.+92     	; 0x1590 <DIO_SetPin_Direction+0xb0>
    1534:	8e 81       	ldd	r24, Y+6	; 0x06
    1536:	9f 81       	ldd	r25, Y+7	; 0x07
    1538:	83 30       	cpi	r24, 0x03	; 3
    153a:	91 05       	cpc	r25, r1
    153c:	e9 f1       	breq	.+122    	; 0x15b8 <DIO_SetPin_Direction+0xd8>
    153e:	c7 c0       	rjmp	.+398    	; 0x16ce <DIO_SetPin_Direction+0x1ee>
		case GroupA:
			SET_BIT(DDRA_REG, u8_pin);
    1540:	aa e3       	ldi	r26, 0x3A	; 58
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	ea e3       	ldi	r30, 0x3A	; 58
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_SetPin_Direction+0x7e>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_SetPin_Direction+0x7a>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	b3 c0       	rjmp	.+358    	; 0x16ce <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupB:
			SET_BIT(DDRB_REG, u8_pin);
    1568:	a7 e3       	ldi	r26, 0x37	; 55
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e7 e3       	ldi	r30, 0x37	; 55
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_SetPin_Direction+0xa6>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_SetPin_Direction+0xa2>
    158a:	84 2b       	or	r24, r20
    158c:	8c 93       	st	X, r24
    158e:	9f c0       	rjmp	.+318    	; 0x16ce <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupC:
			SET_BIT(DDRC_REG, u8_pin);
    1590:	a4 e3       	ldi	r26, 0x34	; 52
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e4 e3       	ldi	r30, 0x34	; 52
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 2e       	mov	r0, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_SetPin_Direction+0xce>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_SetPin_Direction+0xca>
    15b2:	84 2b       	or	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	8b c0       	rjmp	.+278    	; 0x16ce <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupD:
			SET_BIT(DDRD_REG, u8_pin);
    15b8:	a1 e3       	ldi	r26, 0x31	; 49
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e1 e3       	ldi	r30, 0x31	; 49
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_SetPin_Direction+0xf6>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_SetPin_Direction+0xf2>
    15da:	84 2b       	or	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	77 c0       	rjmp	.+238    	; 0x16ce <DIO_SetPin_Direction+0x1ee>
			break;

		}

	}
	else if (direction == INPUT) {
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	88 23       	and	r24, r24
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <DIO_SetPin_Direction+0x108>
    15e6:	73 c0       	rjmp	.+230    	; 0x16ce <DIO_SetPin_Direction+0x1ee>
		switch (u8_port) {
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3d 83       	std	Y+5, r19	; 0x05
    15f0:	2c 83       	std	Y+4, r18	; 0x04
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	59 f1       	breq	.+86     	; 0x1652 <DIO_SetPin_Direction+0x172>
    15fc:	2c 81       	ldd	r18, Y+4	; 0x04
    15fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	2c f4       	brge	.+10     	; 0x1610 <DIO_SetPin_Direction+0x130>
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	69 f0       	breq	.+26     	; 0x1628 <DIO_SetPin_Direction+0x148>
    160e:	5f c0       	rjmp	.+190    	; 0x16ce <DIO_SetPin_Direction+0x1ee>
    1610:	2c 81       	ldd	r18, Y+4	; 0x04
    1612:	3d 81       	ldd	r19, Y+5	; 0x05
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	89 f1       	breq	.+98     	; 0x167c <DIO_SetPin_Direction+0x19c>
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	9d 81       	ldd	r25, Y+5	; 0x05
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	91 05       	cpc	r25, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <DIO_SetPin_Direction+0x146>
    1624:	40 c0       	rjmp	.+128    	; 0x16a6 <DIO_SetPin_Direction+0x1c6>
    1626:	53 c0       	rjmp	.+166    	; 0x16ce <DIO_SetPin_Direction+0x1ee>
		case GroupA:
			CLR_BIT(DDRA_REG, u8_pin);
    1628:	aa e3       	ldi	r26, 0x3A	; 58
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	ea e3       	ldi	r30, 0x3A	; 58
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_SetPin_Direction+0x166>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_SetPin_Direction+0x162>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	3e c0       	rjmp	.+124    	; 0x16ce <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupB:
			CLR_BIT(DDRB_REG, u8_pin);
    1652:	a7 e3       	ldi	r26, 0x37	; 55
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e7 e3       	ldi	r30, 0x37	; 55
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_SetPin_Direction+0x190>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_SetPin_Direction+0x18c>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	29 c0       	rjmp	.+82     	; 0x16ce <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupC:
			CLR_BIT(DDRC_REG, u8_pin);
    167c:	a4 e3       	ldi	r26, 0x34	; 52
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e4 e3       	ldi	r30, 0x34	; 52
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_SetPin_Direction+0x1ba>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_SetPin_Direction+0x1b6>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupD:
			CLR_BIT(DDRD_REG, u8_pin);
    16a6:	a1 e3       	ldi	r26, 0x31	; 49
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e1 e3       	ldi	r30, 0x31	; 49
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_SetPin_Direction+0x1e4>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_SetPin_Direction+0x1e0>
    16c8:	80 95       	com	r24
    16ca:	84 23       	and	r24, r20
    16cc:	8c 93       	st	X, r24
			break;
		}
	}
}
    16ce:	27 96       	adiw	r28, 0x07	; 7
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <DIO_SetPort_Value>:





void DIO_SetPort_Value(u8 u8_port,u8 value){
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <DIO_SetPort_Value+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <DIO_SetPort_Value+0x8>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port){
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	3c 83       	std	Y+4, r19	; 0x04
    16f8:	2b 83       	std	Y+3, r18	; 0x03
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	91 05       	cpc	r25, r1
    1702:	d1 f0       	breq	.+52     	; 0x1738 <DIO_SetPort_Value+0x58>
    1704:	2b 81       	ldd	r18, Y+3	; 0x03
    1706:	3c 81       	ldd	r19, Y+4	; 0x04
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	2c f4       	brge	.+10     	; 0x1718 <DIO_SetPort_Value+0x38>
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	61 f0       	breq	.+24     	; 0x172e <DIO_SetPort_Value+0x4e>
    1716:	1e c0       	rjmp	.+60     	; 0x1754 <DIO_SetPort_Value+0x74>
    1718:	2b 81       	ldd	r18, Y+3	; 0x03
    171a:	3c 81       	ldd	r19, Y+4	; 0x04
    171c:	22 30       	cpi	r18, 0x02	; 2
    171e:	31 05       	cpc	r19, r1
    1720:	81 f0       	breq	.+32     	; 0x1742 <DIO_SetPort_Value+0x62>
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	91 05       	cpc	r25, r1
    172a:	81 f0       	breq	.+32     	; 0x174c <DIO_SetPort_Value+0x6c>
    172c:	13 c0       	rjmp	.+38     	; 0x1754 <DIO_SetPort_Value+0x74>
	case GroupA: PORTA_REG = value;break;
    172e:	eb e3       	ldi	r30, 0x3B	; 59
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	80 83       	st	Z, r24
    1736:	0e c0       	rjmp	.+28     	; 0x1754 <DIO_SetPort_Value+0x74>
	case GroupB: PORTB_REG = value;break;
    1738:	e8 e3       	ldi	r30, 0x38	; 56
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	80 83       	st	Z, r24
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <DIO_SetPort_Value+0x74>
	case GroupC: PORTC_REG = value;break;
    1742:	e5 e3       	ldi	r30, 0x35	; 53
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	80 83       	st	Z, r24
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <DIO_SetPort_Value+0x74>
	case GroupD: PORTD_REG = value;break;
    174c:	e2 e3       	ldi	r30, 0x32	; 50
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	80 83       	st	Z, r24

	}

}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <DIO_SetPort_Direction>:





void DIO_SetPort_Direction(u8 u8_port,u8 direction){
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	00 d0       	rcall	.+0      	; 0x1768 <DIO_SetPort_Direction+0x6>
    1768:	00 d0       	rcall	.+0      	; 0x176a <DIO_SetPort_Direction+0x8>
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port){
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3c 83       	std	Y+4, r19	; 0x04
    177a:	2b 83       	std	Y+3, r18	; 0x03
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	91 05       	cpc	r25, r1
    1784:	d1 f0       	breq	.+52     	; 0x17ba <DIO_SetPort_Direction+0x58>
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	2c f4       	brge	.+10     	; 0x179a <DIO_SetPort_Direction+0x38>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	61 f0       	breq	.+24     	; 0x17b0 <DIO_SetPort_Direction+0x4e>
    1798:	1e c0       	rjmp	.+60     	; 0x17d6 <DIO_SetPort_Direction+0x74>
    179a:	2b 81       	ldd	r18, Y+3	; 0x03
    179c:	3c 81       	ldd	r19, Y+4	; 0x04
    179e:	22 30       	cpi	r18, 0x02	; 2
    17a0:	31 05       	cpc	r19, r1
    17a2:	81 f0       	breq	.+32     	; 0x17c4 <DIO_SetPort_Direction+0x62>
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	91 05       	cpc	r25, r1
    17ac:	81 f0       	breq	.+32     	; 0x17ce <DIO_SetPort_Direction+0x6c>
    17ae:	13 c0       	rjmp	.+38     	; 0x17d6 <DIO_SetPort_Direction+0x74>
	case GroupA: DDRA_REG = direction;break;
    17b0:	ea e3       	ldi	r30, 0x3A	; 58
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	80 83       	st	Z, r24
    17b8:	0e c0       	rjmp	.+28     	; 0x17d6 <DIO_SetPort_Direction+0x74>
	case GroupB: DDRB_REG = direction;break;
    17ba:	e7 e3       	ldi	r30, 0x37	; 55
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	80 83       	st	Z, r24
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <DIO_SetPort_Direction+0x74>
	case GroupC: DDRC_REG = direction;break;
    17c4:	e4 e3       	ldi	r30, 0x34	; 52
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	80 83       	st	Z, r24
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <DIO_SetPort_Direction+0x74>
	case GroupD: DDRD_REG = direction;break;
    17ce:	e1 e3       	ldi	r30, 0x31	; 49
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	80 83       	st	Z, r24

	}

}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <DIO_GetPinValue>:





u8 DIO_GetPinValue(u8 u8_port, u8 u8_pin){
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <DIO_GetPinValue+0x6>
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <DIO_GetPinValue+0x8>
    17ec:	0f 92       	push	r0
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	8a 83       	std	Y+2, r24	; 0x02
    17f4:	6b 83       	std	Y+3, r22	; 0x03
	u8 value = 0;
    17f6:	19 82       	std	Y+1, r1	; 0x01
	switch(u8_port){
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	3d 83       	std	Y+5, r19	; 0x05
    1800:	2c 83       	std	Y+4, r18	; 0x04
    1802:	4c 81       	ldd	r20, Y+4	; 0x04
    1804:	5d 81       	ldd	r21, Y+5	; 0x05
    1806:	41 30       	cpi	r20, 0x01	; 1
    1808:	51 05       	cpc	r21, r1
    180a:	41 f1       	breq	.+80     	; 0x185c <DIO_GetPinValue+0x78>
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	9d 81       	ldd	r25, Y+5	; 0x05
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	91 05       	cpc	r25, r1
    1814:	34 f4       	brge	.+12     	; 0x1822 <DIO_GetPinValue+0x3e>
    1816:	2c 81       	ldd	r18, Y+4	; 0x04
    1818:	3d 81       	ldd	r19, Y+5	; 0x05
    181a:	21 15       	cp	r18, r1
    181c:	31 05       	cpc	r19, r1
    181e:	61 f0       	breq	.+24     	; 0x1838 <DIO_GetPinValue+0x54>
    1820:	52 c0       	rjmp	.+164    	; 0x18c6 <DIO_GetPinValue+0xe2>
    1822:	4c 81       	ldd	r20, Y+4	; 0x04
    1824:	5d 81       	ldd	r21, Y+5	; 0x05
    1826:	42 30       	cpi	r20, 0x02	; 2
    1828:	51 05       	cpc	r21, r1
    182a:	51 f1       	breq	.+84     	; 0x1880 <DIO_GetPinValue+0x9c>
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	83 30       	cpi	r24, 0x03	; 3
    1832:	91 05       	cpc	r25, r1
    1834:	b9 f1       	breq	.+110    	; 0x18a4 <DIO_GetPinValue+0xc0>
    1836:	47 c0       	rjmp	.+142    	; 0x18c6 <DIO_GetPinValue+0xe2>
	case GroupA:value = GET_BIT(PINA_REG,u8_pin);break;
    1838:	e9 e3       	ldi	r30, 0x39	; 57
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a9 01       	movw	r20, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_GetPinValue+0x6c>
    184c:	55 95       	asr	r21
    184e:	47 95       	ror	r20
    1850:	8a 95       	dec	r24
    1852:	e2 f7       	brpl	.-8      	; 0x184c <DIO_GetPinValue+0x68>
    1854:	ca 01       	movw	r24, r20
    1856:	81 70       	andi	r24, 0x01	; 1
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	35 c0       	rjmp	.+106    	; 0x18c6 <DIO_GetPinValue+0xe2>
	case GroupB:value = GET_BIT(PINB_REG,u8_pin);break;
    185c:	e6 e3       	ldi	r30, 0x36	; 54
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a9 01       	movw	r20, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <DIO_GetPinValue+0x90>
    1870:	55 95       	asr	r21
    1872:	47 95       	ror	r20
    1874:	8a 95       	dec	r24
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <DIO_GetPinValue+0x8c>
    1878:	ca 01       	movw	r24, r20
    187a:	81 70       	andi	r24, 0x01	; 1
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	23 c0       	rjmp	.+70     	; 0x18c6 <DIO_GetPinValue+0xe2>
	case GroupC:value = GET_BIT(PINC_REG,u8_pin);break;
    1880:	e3 e3       	ldi	r30, 0x33	; 51
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <DIO_GetPinValue+0xb4>
    1894:	55 95       	asr	r21
    1896:	47 95       	ror	r20
    1898:	8a 95       	dec	r24
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <DIO_GetPinValue+0xb0>
    189c:	ca 01       	movw	r24, r20
    189e:	81 70       	andi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	11 c0       	rjmp	.+34     	; 0x18c6 <DIO_GetPinValue+0xe2>
	case GroupD:value = GET_BIT(PIND_REG,u8_pin);break;
    18a4:	e0 e3       	ldi	r30, 0x30	; 48
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_GetPinValue+0xd8>
    18b8:	55 95       	asr	r21
    18ba:	47 95       	ror	r20
    18bc:	8a 95       	dec	r24
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <DIO_GetPinValue+0xd4>
    18c0:	ca 01       	movw	r24, r20
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	89 83       	std	Y+1, r24	; 0x01

	}
	return value;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <ADC_init>:
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATh.h"
#include "../ADC/ADC_INTERFACE.h"
#include "../ADC/ADC_REG.h"

void ADC_init(){
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	//ADC Voltage Reference Selection to AVCC
	SET_BIT(ADMUX_REG,ADMUX_REFS0);
    18e0:	a7 e2       	ldi	r26, 0x27	; 39
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e7 e2       	ldi	r30, 0x27	; 39
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	80 64       	ori	r24, 0x40	; 64
    18ec:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,ADMUX_REFS1);
    18ee:	a7 e2       	ldi	r26, 0x27	; 39
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e7 e2       	ldi	r30, 0x27	; 39
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 77       	andi	r24, 0x7F	; 127
    18fa:	8c 93       	st	X, r24

    //ADC left Adjust
	SET_BIT(ADMUX_REG,ADMUX_ADLAR);
    18fc:	a7 e2       	ldi	r26, 0x27	; 39
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e7 e2       	ldi	r30, 0x27	; 39
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	80 62       	ori	r24, 0x20	; 32
    1908:	8c 93       	st	X, r24

	//ADC Prescaler Clock Selection to 128 (the slowest speed)
	SET_BIT(ADCSRA_REG,ADCSRA_ADPS0);
    190a:	a6 e2       	ldi	r26, 0x26	; 38
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e6 e2       	ldi	r30, 0x26	; 38
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	81 60       	ori	r24, 0x01	; 1
    1916:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADCSRA_ADPS1);
    1918:	a6 e2       	ldi	r26, 0x26	; 38
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e6 e2       	ldi	r30, 0x26	; 38
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	82 60       	ori	r24, 0x02	; 2
    1924:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADCSRA_ADPS2);
    1926:	a6 e2       	ldi	r26, 0x26	; 38
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e6 e2       	ldi	r30, 0x26	; 38
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	84 60       	ori	r24, 0x04	; 4
    1932:	8c 93       	st	X, r24

    //ADC Enable
	SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    1934:	a6 e2       	ldi	r26, 0x26	; 38
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e6 e2       	ldi	r30, 0x26	; 38
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	80 68       	ori	r24, 0x80	; 128
    1940:	8c 93       	st	X, r24
}
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <ADC_Read_Sych>:

u16 ADC_Read_Sych(u8 channel){
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <ADC_Read_Sych+0x6>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <ADC_Read_Sych+0x8>
    1950:	00 d0       	rcall	.+0      	; 0x1952 <ADC_Read_Sych+0xa>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	8d 83       	std	Y+5, r24	; 0x05
	u32 time = 100000;
    1958:	80 ea       	ldi	r24, 0xA0	; 160
    195a:	96 e8       	ldi	r25, 0x86	; 134
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	8b 83       	std	Y+3, r24	; 0x03
	u32 cnt = 0;
    1960:	1a 82       	std	Y+2, r1	; 0x02
    1962:	19 82       	std	Y+1, r1	; 0x01
	//Channel Select
	ADMUX_REG &= 0b11100000;
    1964:	a7 e2       	ldi	r26, 0x27	; 39
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e7 e2       	ldi	r30, 0x27	; 39
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	80 7e       	andi	r24, 0xE0	; 224
    1970:	8c 93       	st	X, r24
	ADMUX_REG |= channel;
    1972:	a7 e2       	ldi	r26, 0x27	; 39
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e7 e2       	ldi	r30, 0x27	; 39
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	90 81       	ld	r25, Z
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	89 2b       	or	r24, r25
    1980:	8c 93       	st	X, r24

	//Start Conversion
	SET_BIT(ADCSRA_REG,ADCSRA_ADSC);
    1982:	a6 e2       	ldi	r26, 0x26	; 38
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e6 e2       	ldi	r30, 0x26	; 38
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	80 64       	ori	r24, 0x40	; 64
    198e:	8c 93       	st	X, r24
    1990:	05 c0       	rjmp	.+10     	; 0x199c <ADC_Read_Sych+0x54>

	while(GET_BIT(ADCSRA_REG,ADCSRA_ADIF)==0 || cnt != time){
		cnt++;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG |= channel;

	//Start Conversion
	SET_BIT(ADCSRA_REG,ADCSRA_ADSC);

	while(GET_BIT(ADCSRA_REG,ADCSRA_ADIF)==0 || cnt != time){
    199c:	e6 e2       	ldi	r30, 0x26	; 38
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	29 81       	ldd	r18, Y+1	; 0x01
    19a4:	3a 81       	ldd	r19, Y+2	; 0x02
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	9c 81       	ldd	r25, Y+4	; 0x04
    19aa:	28 17       	cp	r18, r24
    19ac:	39 07       	cpc	r19, r25
    19ae:	89 f7       	brne	.-30     	; 0x1992 <ADC_Read_Sych+0x4a>
		cnt++;
	}

	//Clear ADC Flag for the next conversion because No INTERRUPT is used
	SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    19b0:	a6 e2       	ldi	r26, 0x26	; 38
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e6 e2       	ldi	r30, 0x26	; 38
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 61       	ori	r24, 0x10	; 16
    19bc:	8c 93       	st	X, r24

	//Return the reading
    return ADCL_REG;
    19be:	e4 e2       	ldi	r30, 0x24	; 36
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01


}
    19c6:	26 96       	adiw	r28, 0x06	; 6
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <Shift>:
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATh.h"
#include "SHIFT_REGISTER_INTERFACE.h"
#include "../../MCAL/DIO/DIO_INTERFACE.h"

void Shift(u8 port,u8 latch_pin,u8 data_pin,u8 clk_pin,u16 binary){
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	27 97       	sbiw	r28, 0x07	; 7
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	6b 83       	std	Y+3, r22	; 0x03
    19f4:	4c 83       	std	Y+4, r20	; 0x04
    19f6:	2d 83       	std	Y+5, r18	; 0x05
    19f8:	1f 83       	std	Y+7, r17	; 0x07
    19fa:	0e 83       	std	Y+6, r16	; 0x06

	//latch low
	DIO_SetPin_Value(port,latch_pin,0);
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	6b 81       	ldd	r22, Y+3	; 0x03
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
	//clock trigger
	DIO_SetPin_Value(port,clk_pin,0);
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	6d 81       	ldd	r22, Y+5	; 0x05
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
	DIO_SetPin_Value(port,clk_pin,1);
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	6d 81       	ldd	r22, Y+5	; 0x05
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
	for(u8 i =0;i<16;i++){
    1a1a:	19 82       	std	Y+1, r1	; 0x01
    1a1c:	27 c0       	rjmp	.+78     	; 0x1a6c <Shift+0x94>
		if(GET_BIT(binary,i)==1)
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	8e 81       	ldd	r24, Y+6	; 0x06
    1a26:	9f 81       	ldd	r25, Y+7	; 0x07
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <Shift+0x58>
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <Shift+0x54>
    1a34:	81 70       	andi	r24, 0x01	; 1
    1a36:	90 70       	andi	r25, 0x00	; 0
    1a38:	88 23       	and	r24, r24
    1a3a:	31 f0       	breq	.+12     	; 0x1a48 <Shift+0x70>
		  DIO_SetPin_Value(port,data_pin,1);
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	6c 81       	ldd	r22, Y+4	; 0x04
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
    1a46:	05 c0       	rjmp	.+10     	; 0x1a52 <Shift+0x7a>
		else
			DIO_SetPin_Value(port,data_pin,0);
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	6c 81       	ldd	r22, Y+4	; 0x04
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
		//clock trigger
		DIO_SetPin_Value(port,clk_pin,0);
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	6d 81       	ldd	r22, Y+5	; 0x05
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
		DIO_SetPin_Value(port,clk_pin,1);
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	6d 81       	ldd	r22, Y+5	; 0x05
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
	//latch low
	DIO_SetPin_Value(port,latch_pin,0);
	//clock trigger
	DIO_SetPin_Value(port,clk_pin,0);
	DIO_SetPin_Value(port,clk_pin,1);
	for(u8 i =0;i<16;i++){
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	8f 5f       	subi	r24, 0xFF	; 255
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	80 31       	cpi	r24, 0x10	; 16
    1a70:	b0 f2       	brcs	.-84     	; 0x1a1e <Shift+0x46>
		DIO_SetPin_Value(port,clk_pin,1);

	}

   //latch high
	DIO_SetPin_Value(port,latch_pin,1);
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	6b 81       	ldd	r22, Y+3	; 0x03
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>

}
    1a7c:	27 96       	adiw	r28, 0x07	; 7
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	08 95       	ret

00001a92 <Motor_PWM_8BIT>:
 *      Author: Mustapha
 */
#include "../../MCAL/Timer/TIMER_INTERFACE.h"
#include"../../UTILS/STD_TYPES.h"

void Motor_PWM_8BIT(u8 value){
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	0f 92       	push	r0
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    SET_OCR0(value);
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	0e 94 53 08 	call	0x10a6	; 0x10a6 <SET_OCR0>

}
    1aa4:	0f 90       	pop	r0
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <Motor_MAXSPEED_8BIT>:
void Motor_MAXSPEED_8BIT(){
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    SET_OCR0(255);
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <SET_OCR0>
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <Motor_PWM_16BIT>:
void Motor_PWM_16BIT(u16 value){
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <Motor_PWM_16BIT+0x6>
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	9a 83       	std	Y+2, r25	; 0x02
    1acc:	89 83       	std	Y+1, r24	; 0x01
	SET_OCR1A(value);
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad2:	0e 94 8f 08 	call	0x111e	; 0x111e <SET_OCR1A>
}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <Motor_MAXSPEED_16BIT>:
void Motor_MAXSPEED_16BIT(){
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
	SET_OCR1A(65535);
    1ae8:	8f ef       	ldi	r24, 0xFF	; 255
    1aea:	9f ef       	ldi	r25, 0xFF	; 255
    1aec:	0e 94 8f 08 	call	0x111e	; 0x111e <SET_OCR1A>
}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <LCD8Bit_Send_Command>:
#include "../CLCD1602/CLCD_INTERFACE.h"

/**************/
/* 8-BIT MODE */
/**************/
void LCD8Bit_Send_Command(u8 command){
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	6d 97       	sbiw	r28, 0x1d	; 29
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	8d 8f       	std	Y+29, r24	; 0x1d
	//RW is 0 to Write
    // DIO_SetPin_Value(LCD_Command_Port,LCD_RW_Pin,LOW);
	//RS is 0 to Send COMMAND
     DIO_SetPin_Value(LCD_Command_Port,LCD_RS_Pin,LOW);
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
	//Send Command
    DIO_SetPort_Value(LCD_Data_Port,command);
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b1a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <DIO_SetPort_Value>
	//Enable
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,HIGH);
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	41 e0       	ldi	r20, 0x01	; 1
    1b24:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	b0 e4       	ldi	r27, 0x40	; 64
    1b30:	89 8f       	std	Y+25, r24	; 0x19
    1b32:	9a 8f       	std	Y+26, r25	; 0x1a
    1b34:	ab 8f       	std	Y+27, r26	; 0x1b
    1b36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b38:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4a ef       	ldi	r20, 0xFA	; 250
    1b46:	54 e4       	ldi	r21, 0x44	; 68
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	8d 8b       	std	Y+21, r24	; 0x15
    1b52:	9e 8b       	std	Y+22, r25	; 0x16
    1b54:	af 8b       	std	Y+23, r26	; 0x17
    1b56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b58:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <LCD8Bit_Send_Command+0x84>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9c 8b       	std	Y+20, r25	; 0x14
    1b76:	8b 8b       	std	Y+19, r24	; 0x13
    1b78:	3f c0       	rjmp	.+126    	; 0x1bf8 <LCD8Bit_Send_Command+0x102>
	else if (__tmp > 65535)
    1b7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b80:	98 8d       	ldd	r25, Y+24	; 0x18
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	4c f5       	brge	.+82     	; 0x1be4 <LCD8Bit_Send_Command+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	69 8d       	ldd	r22, Y+25	; 0x19
    1b94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9c 8b       	std	Y+20, r25	; 0x14
    1bb8:	8b 8b       	std	Y+19, r24	; 0x13
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <LCD8Bit_Send_Command+0xe4>
    1bbc:	88 ec       	ldi	r24, 0xC8	; 200
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9a 8b       	std	Y+18, r25	; 0x12
    1bc2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bc4:	89 89       	ldd	r24, Y+17	; 0x11
    1bc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD8Bit_Send_Command+0xd2>
    1bcc:	9a 8b       	std	Y+18, r25	; 0x12
    1bce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bda:	8b 89       	ldd	r24, Y+19	; 0x13
    1bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	69 f7       	brne	.-38     	; 0x1bbc <LCD8Bit_Send_Command+0xc6>
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <LCD8Bit_Send_Command+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be4:	6d 89       	ldd	r22, Y+21	; 0x15
    1be6:	7e 89       	ldd	r23, Y+22	; 0x16
    1be8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bea:	98 8d       	ldd	r25, Y+24	; 0x18
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9c 8b       	std	Y+20, r25	; 0x14
    1bf6:	8b 8b       	std	Y+19, r24	; 0x13
    1bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfc:	98 8b       	std	Y+16, r25	; 0x10
    1bfe:	8f 87       	std	Y+15, r24	; 0x0f
    1c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c02:	98 89       	ldd	r25, Y+16	; 0x10
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD8Bit_Send_Command+0x10e>
    1c08:	98 8b       	std	Y+16, r25	; 0x10
    1c0a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,LOW);
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a0 e0       	ldi	r26, 0x00	; 0
    1c1c:	b0 e4       	ldi	r27, 0x40	; 64
    1c1e:	8b 87       	std	Y+11, r24	; 0x0b
    1c20:	9c 87       	std	Y+12, r25	; 0x0c
    1c22:	ad 87       	std	Y+13, r26	; 0x0d
    1c24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	4a ef       	ldi	r20, 0xFA	; 250
    1c34:	54 e4       	ldi	r21, 0x44	; 68
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	8f 83       	std	Y+7, r24	; 0x07
    1c40:	98 87       	std	Y+8, r25	; 0x08
    1c42:	a9 87       	std	Y+9, r26	; 0x09
    1c44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c46:	6f 81       	ldd	r22, Y+7	; 0x07
    1c48:	78 85       	ldd	r23, Y+8	; 0x08
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5a:	88 23       	and	r24, r24
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <LCD8Bit_Send_Command+0x172>
		__ticks = 1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	3f c0       	rjmp	.+126    	; 0x1ce6 <LCD8Bit_Send_Command+0x1f0>
	else if (__tmp > 65535)
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	3f ef       	ldi	r19, 0xFF	; 255
    1c74:	4f e7       	ldi	r20, 0x7F	; 127
    1c76:	57 e4       	ldi	r21, 0x47	; 71
    1c78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c7c:	18 16       	cp	r1, r24
    1c7e:	4c f5       	brge	.+82     	; 0x1cd2 <LCD8Bit_Send_Command+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e2       	ldi	r20, 0x20	; 32
    1c8e:	51 e4       	ldi	r21, 0x41	; 65
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	bc 01       	movw	r22, r24
    1c9a:	cd 01       	movw	r24, r26
    1c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	0f c0       	rjmp	.+30     	; 0x1cc8 <LCD8Bit_Send_Command+0x1d2>
    1caa:	88 ec       	ldi	r24, 0xC8	; 200
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9c 83       	std	Y+4, r25	; 0x04
    1cb0:	8b 83       	std	Y+3, r24	; 0x03
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD8Bit_Send_Command+0x1c0>
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	69 f7       	brne	.-38     	; 0x1caa <LCD8Bit_Send_Command+0x1b4>
    1cd0:	14 c0       	rjmp	.+40     	; 0x1cfa <LCD8Bit_Send_Command+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd4:	78 85       	ldd	r23, Y+8	; 0x08
    1cd6:	89 85       	ldd	r24, Y+9	; 0x09
    1cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD8Bit_Send_Command+0x1fc>
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    1cfa:	6d 96       	adiw	r28, 0x1d	; 29
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <LCD8Bit_Send_Data>:

void LCD8Bit_Send_Data(u8 data){
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	6d 97       	sbiw	r28, 0x1d	; 29
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	8d 8f       	std	Y+29, r24	; 0x1d
	//RW is 0 to Write
    // DIO_SetPin_Value(LCD_Command_Port,LCD_RW_Pin,LOW);
	//RS is 0 to Send DATA
     DIO_SetPin_Value(LCD_Command_Port,LCD_RS_Pin,HIGH);
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	41 e0       	ldi	r20, 0x01	; 1
    1d28:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
	//Send Command
    DIO_SetPort_Value(LCD_Data_Port,data);
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d30:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <DIO_SetPort_Value>
	//Enable
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,HIGH);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 e0       	ldi	r26, 0x00	; 0
    1d44:	b0 e4       	ldi	r27, 0x40	; 64
    1d46:	89 8f       	std	Y+25, r24	; 0x19
    1d48:	9a 8f       	std	Y+26, r25	; 0x1a
    1d4a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a ef       	ldi	r20, 0xFA	; 250
    1d5c:	54 e4       	ldi	r21, 0x44	; 68
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	8d 8b       	std	Y+21, r24	; 0x15
    1d68:	9e 8b       	std	Y+22, r25	; 0x16
    1d6a:	af 8b       	std	Y+23, r26	; 0x17
    1d6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d70:	7e 89       	ldd	r23, Y+22	; 0x16
    1d72:	8f 89       	ldd	r24, Y+23	; 0x17
    1d74:	98 8d       	ldd	r25, Y+24	; 0x18
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <LCD8Bit_Send_Data+0x84>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9c 8b       	std	Y+20, r25	; 0x14
    1d8c:	8b 8b       	std	Y+19, r24	; 0x13
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <LCD8Bit_Send_Data+0x102>
	else if (__tmp > 65535)
    1d90:	6d 89       	ldd	r22, Y+21	; 0x15
    1d92:	7e 89       	ldd	r23, Y+22	; 0x16
    1d94:	8f 89       	ldd	r24, Y+23	; 0x17
    1d96:	98 8d       	ldd	r25, Y+24	; 0x18
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <LCD8Bit_Send_Data+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	69 8d       	ldd	r22, Y+25	; 0x19
    1daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9c 8b       	std	Y+20, r25	; 0x14
    1dce:	8b 8b       	std	Y+19, r24	; 0x13
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <LCD8Bit_Send_Data+0xe4>
    1dd2:	88 ec       	ldi	r24, 0xC8	; 200
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9a 8b       	std	Y+18, r25	; 0x12
    1dd8:	89 8b       	std	Y+17, r24	; 0x11
    1dda:	89 89       	ldd	r24, Y+17	; 0x11
    1ddc:	9a 89       	ldd	r25, Y+18	; 0x12
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD8Bit_Send_Data+0xd2>
    1de2:	9a 8b       	std	Y+18, r25	; 0x12
    1de4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8b 89       	ldd	r24, Y+19	; 0x13
    1de8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	9c 8b       	std	Y+20, r25	; 0x14
    1dee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8b 89       	ldd	r24, Y+19	; 0x13
    1df2:	9c 89       	ldd	r25, Y+20	; 0x14
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <LCD8Bit_Send_Data+0xc6>
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <LCD8Bit_Send_Data+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1e00:	98 8d       	ldd	r25, Y+24	; 0x18
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9c 8b       	std	Y+20, r25	; 0x14
    1e0c:	8b 8b       	std	Y+19, r24	; 0x13
    1e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e10:	9c 89       	ldd	r25, Y+20	; 0x14
    1e12:	98 8b       	std	Y+16, r25	; 0x10
    1e14:	8f 87       	std	Y+15, r24	; 0x0f
    1e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e18:	98 89       	ldd	r25, Y+16	; 0x10
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD8Bit_Send_Data+0x10e>
    1e1e:	98 8b       	std	Y+16, r25	; 0x10
    1e20:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,LOW);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a0 e0       	ldi	r26, 0x00	; 0
    1e32:	b0 e4       	ldi	r27, 0x40	; 64
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	9c 87       	std	Y+12, r25	; 0x0c
    1e38:	ad 87       	std	Y+13, r26	; 0x0d
    1e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a ef       	ldi	r20, 0xFA	; 250
    1e4a:	54 e4       	ldi	r21, 0x44	; 68
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8f 83       	std	Y+7, r24	; 0x07
    1e56:	98 87       	std	Y+8, r25	; 0x08
    1e58:	a9 87       	std	Y+9, r26	; 0x09
    1e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <LCD8Bit_Send_Data+0x172>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <LCD8Bit_Send_Data+0x1f0>
	else if (__tmp > 65535)
    1e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e80:	78 85       	ldd	r23, Y+8	; 0x08
    1e82:	89 85       	ldd	r24, Y+9	; 0x09
    1e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <LCD8Bit_Send_Data+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <LCD8Bit_Send_Data+0x1d2>
    1ec0:	88 ec       	ldi	r24, 0xC8	; 200
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <LCD8Bit_Send_Data+0x1c0>
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <LCD8Bit_Send_Data+0x1b4>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <LCD8Bit_Send_Data+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD8Bit_Send_Data+0x1fc>
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);


}
    1f10:	6d 96       	adiw	r28, 0x1d	; 29
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <LCD8Bit_init>:
void LCD8Bit_init(){
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	2e 97       	sbiw	r28, 0x0e	; 14
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a0 e2       	ldi	r26, 0x20	; 32
    1f3c:	b2 e4       	ldi	r27, 0x42	; 66
    1f3e:	8b 87       	std	Y+11, r24	; 0x0b
    1f40:	9c 87       	std	Y+12, r25	; 0x0c
    1f42:	ad 87       	std	Y+13, r26	; 0x0d
    1f44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	4a ef       	ldi	r20, 0xFA	; 250
    1f54:	54 e4       	ldi	r21, 0x44	; 68
    1f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	8f 83       	std	Y+7, r24	; 0x07
    1f60:	98 87       	std	Y+8, r25	; 0x08
    1f62:	a9 87       	std	Y+9, r26	; 0x09
    1f64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f66:	6f 81       	ldd	r22, Y+7	; 0x07
    1f68:	78 85       	ldd	r23, Y+8	; 0x08
    1f6a:	89 85       	ldd	r24, Y+9	; 0x09
    1f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e8       	ldi	r20, 0x80	; 128
    1f74:	5f e3       	ldi	r21, 0x3F	; 63
    1f76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7a:	88 23       	and	r24, r24
    1f7c:	2c f4       	brge	.+10     	; 0x1f88 <LCD8Bit_init+0x66>
		__ticks = 1;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9e 83       	std	Y+6, r25	; 0x06
    1f84:	8d 83       	std	Y+5, r24	; 0x05
    1f86:	3f c0       	rjmp	.+126    	; 0x2006 <LCD8Bit_init+0xe4>
	else if (__tmp > 65535)
    1f88:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8a:	78 85       	ldd	r23, Y+8	; 0x08
    1f8c:	89 85       	ldd	r24, Y+9	; 0x09
    1f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	3f ef       	ldi	r19, 0xFF	; 255
    1f94:	4f e7       	ldi	r20, 0x7F	; 127
    1f96:	57 e4       	ldi	r21, 0x47	; 71
    1f98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f9c:	18 16       	cp	r1, r24
    1f9e:	4c f5       	brge	.+82     	; 0x1ff2 <LCD8Bit_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e2       	ldi	r20, 0x20	; 32
    1fae:	51 e4       	ldi	r21, 0x41	; 65
    1fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	0f c0       	rjmp	.+30     	; 0x1fe8 <LCD8Bit_init+0xc6>
    1fca:	88 ec       	ldi	r24, 0xC8	; 200
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	9c 83       	std	Y+4, r25	; 0x04
    1fd0:	8b 83       	std	Y+3, r24	; 0x03
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <LCD8Bit_init+0xb4>
    1fda:	9c 83       	std	Y+4, r25	; 0x04
    1fdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fea:	9e 81       	ldd	r25, Y+6	; 0x06
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	69 f7       	brne	.-38     	; 0x1fca <LCD8Bit_init+0xa8>
    1ff0:	14 c0       	rjmp	.+40     	; 0x201a <LCD8Bit_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	9a 83       	std	Y+2, r25	; 0x02
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	f1 f7       	brne	.-4      	; 0x2012 <LCD8Bit_init+0xf0>
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	89 83       	std	Y+1, r24	; 0x01
    //Wait more than 30 ms
	_delay_ms(40);
	//Function Set
	LCD8Bit_Send_Command(FUNC_SET);
    201a:	88 e3       	ldi	r24, 0x38	; 56
    201c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
	//ON OFF Control
	LCD8Bit_Send_Command(ON_OFF);
    2020:	8c e0       	ldi	r24, 0x0C	; 12
    2022:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
	//Clear
	LCD8Bit_Send_Command(LCD8Bit_CLEAR);
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
}
    202c:	2e 96       	adiw	r28, 0x0e	; 14
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <LCD_Send_String>:


/***************/
/*LCD FUNCTIONS*/
/***************/
void LCD_Send_String(const char* word){
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <LCD_Send_String+0x6>
    2044:	0f 92       	push	r0
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	9b 83       	std	Y+3, r25	; 0x03
    204c:	8a 83       	std	Y+2, r24	; 0x02
	u8 cnt = 0;
    204e:	19 82       	std	Y+1, r1	; 0x01
    2050:	0e c0       	rjmp	.+28     	; 0x206e <LCD_Send_String+0x30>
	while(word[cnt] != '\0'){
		LCD8Bit_Send_Data(word[cnt]);
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	9b 81       	ldd	r25, Y+3	; 0x03
    205c:	fc 01       	movw	r30, r24
    205e:	e2 0f       	add	r30, r18
    2060:	f3 1f       	adc	r31, r19
    2062:	80 81       	ld	r24, Z
    2064:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD8Bit_Send_Data>
		cnt++;
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	8f 5f       	subi	r24, 0xFF	; 255
    206c:	89 83       	std	Y+1, r24	; 0x01
/***************/
/*LCD FUNCTIONS*/
/***************/
void LCD_Send_String(const char* word){
	u8 cnt = 0;
	while(word[cnt] != '\0'){
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	9b 81       	ldd	r25, Y+3	; 0x03
    2078:	fc 01       	movw	r30, r24
    207a:	e2 0f       	add	r30, r18
    207c:	f3 1f       	adc	r31, r19
    207e:	80 81       	ld	r24, Z
    2080:	88 23       	and	r24, r24
    2082:	39 f7       	brne	.-50     	; 0x2052 <LCD_Send_String+0x14>
		LCD8Bit_Send_Data(word[cnt]);
		cnt++;
	}
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <LCD_Send_Int>:

void LCD_Send_Int(u32 num){
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	2c 97       	sbiw	r28, 0x0c	; 12
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	9c 87       	std	Y+12, r25	; 0x0c
    20a6:	8b 87       	std	Y+11, r24	; 0x0b
	char arr[10];
	itoa(num,arr,10);
    20a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    20aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ac:	9e 01       	movw	r18, r28
    20ae:	2f 5f       	subi	r18, 0xFF	; 255
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	b9 01       	movw	r22, r18
    20b4:	4a e0       	ldi	r20, 0x0A	; 10
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <itoa>
	LCD_Send_String(arr);
    20bc:	ce 01       	movw	r24, r28
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>

}
    20c4:	2c 96       	adiw	r28, 0x0c	; 12
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <LCD_GOTOXY>:


void LCD_GOTOXY(u8 x, u8 y){
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <LCD_GOTOXY+0x6>
    20dc:	0f 92       	push	r0
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	8a 83       	std	Y+2, r24	; 0x02
    20e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_ADDRESS = 0;
    20e6:	19 82       	std	Y+1, r1	; 0x01
	if(y == 0){
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	88 23       	and	r24, r24
    20ec:	11 f4       	brne	.+4      	; 0x20f2 <LCD_GOTOXY+0x1c>
		DDRAM_ADDRESS = x;
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	89 83       	std	Y+1, r24	; 0x01
	}
	if(y == 1){
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	19 f4       	brne	.+6      	; 0x20fe <LCD_GOTOXY+0x28>
	    DDRAM_ADDRESS = x + 0x40;
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	80 5c       	subi	r24, 0xC0	; 192
    20fc:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD8Bit_Send_Command(DDRAM_ADDRESS + 128);
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	80 58       	subi	r24, 0x80	; 128
    2102:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
}
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <LCD_Save_Character>:

void LCD_Save_Character(u8* arr,u8 BlockNumber){
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <LCD_Save_Character+0x6>
    2118:	00 d0       	rcall	.+0      	; 0x211a <LCD_Save_Character+0x8>
    211a:	0f 92       	push	r0
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	8b 83       	std	Y+3, r24	; 0x03
    2124:	6d 83       	std	Y+5, r22	; 0x05
	//Calculate CGRAM ADDRESS
	u8 CGRAM = 0;
    2126:	1a 82       	std	Y+2, r1	; 0x02
	CGRAM = BlockNumber * 8;
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	88 2f       	mov	r24, r24
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	8a 83       	std	Y+2, r24	; 0x02
	//Write the Character in CGRAM
	LCD8Bit_Send_Command(CGRAM + 64);
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	80 5c       	subi	r24, 0xC0	; 192
    2140:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
	for(u8 i = 0 ;i<8;i++){
    2144:	19 82       	std	Y+1, r1	; 0x01
    2146:	0e c0       	rjmp	.+28     	; 0x2164 <LCD_Save_Character+0x52>
		LCD8Bit_Send_Data(arr[i]);
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	fc 01       	movw	r30, r24
    2154:	e2 0f       	add	r30, r18
    2156:	f3 1f       	adc	r31, r19
    2158:	80 81       	ld	r24, Z
    215a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD8Bit_Send_Data>
	//Calculate CGRAM ADDRESS
	u8 CGRAM = 0;
	CGRAM = BlockNumber * 8;
	//Write the Character in CGRAM
	LCD8Bit_Send_Command(CGRAM + 64);
	for(u8 i = 0 ;i<8;i++){
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	88 30       	cpi	r24, 0x08	; 8
    2168:	78 f3       	brcs	.-34     	; 0x2148 <LCD_Save_Character+0x36>
		LCD8Bit_Send_Data(arr[i]);
	}

}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <LCD_Display_Character>:


void LCD_Display_Character(u8 BlockNumber ,u8 x ,u8 y){
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <LCD_Display_Character+0x6>
    2180:	00 d0       	rcall	.+0      	; 0x2182 <LCD_Display_Character+0x8>
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	8a 83       	std	Y+2, r24	; 0x02
    2188:	6b 83       	std	Y+3, r22	; 0x03
    218a:	4c 83       	std	Y+4, r20	; 0x04
	//Calculate CGRAM ADDRESS
	u8 CGRAM = 0;
    218c:	19 82       	std	Y+1, r1	; 0x01
	CGRAM = BlockNumber * 8;
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	89 83       	std	Y+1, r24	; 0x01
	//Write the Character in CGRAM
	LCD8Bit_Send_Command(CGRAM + 64);
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	80 5c       	subi	r24, 0xC0	; 192
    21a6:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
	//Goto to print position
	LCD_GOTOXY(x,y);
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	6c 81       	ldd	r22, Y+4	; 0x04
    21ae:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_GOTOXY>
	//Write the character on the DDRAM (LCD)
	LCD8Bit_Send_Data(BlockNumber);
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD8Bit_Send_Data>
    }
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	08 95       	ret

000021c6 <BuzzerON>:
#include <avr/delay.h>

#include "../../Config.h"


void BuzzerON(){
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
  DIO_SetPin_Value(BuzzerPort,BuzzerPin,HIGH);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	64 e0       	ldi	r22, 0x04	; 4
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
}
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <BuzzerOFF>:
void BuzzerOFF(){
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
	  DIO_SetPin_Value(BuzzerPort,BuzzerPin,LOW);
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	64 e0       	ldi	r22, 0x04	; 4
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>

}
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <BuzzerTOGGLE>:
void BuzzerTOGGLE(u32 ontime){
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	60 97       	sbiw	r28, 0x10	; 16
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	98 8b       	std	Y+16, r25	; 0x10
    220c:	8f 87       	std	Y+15, r24	; 0x0f
	BuzzerON();
    220e:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <BuzzerON>
    _delay_ms(ontime);
    2212:	8f 85       	ldd	r24, Y+15	; 0x0f
    2214:	98 89       	ldd	r25, Y+16	; 0x10
    2216:	cc 01       	movw	r24, r24
    2218:	a0 e0       	ldi	r26, 0x00	; 0
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	8b 87       	std	Y+11, r24	; 0x0b
    222a:	9c 87       	std	Y+12, r25	; 0x0c
    222c:	ad 87       	std	Y+13, r26	; 0x0d
    222e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2230:	6b 85       	ldd	r22, Y+11	; 0x0b
    2232:	7c 85       	ldd	r23, Y+12	; 0x0c
    2234:	8d 85       	ldd	r24, Y+13	; 0x0d
    2236:	9e 85       	ldd	r25, Y+14	; 0x0e
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4a ef       	ldi	r20, 0xFA	; 250
    223e:	54 e4       	ldi	r21, 0x44	; 68
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8f 83       	std	Y+7, r24	; 0x07
    224a:	98 87       	std	Y+8, r25	; 0x08
    224c:	a9 87       	std	Y+9, r26	; 0x09
    224e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	5f e3       	ldi	r21, 0x3F	; 63
    2260:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2264:	88 23       	and	r24, r24
    2266:	2c f4       	brge	.+10     	; 0x2272 <BuzzerTOGGLE+0x7c>
		__ticks = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9e 83       	std	Y+6, r25	; 0x06
    226e:	8d 83       	std	Y+5, r24	; 0x05
    2270:	3f c0       	rjmp	.+126    	; 0x22f0 <BuzzerTOGGLE+0xfa>
	else if (__tmp > 65535)
    2272:	6f 81       	ldd	r22, Y+7	; 0x07
    2274:	78 85       	ldd	r23, Y+8	; 0x08
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	4c f5       	brge	.+82     	; 0x22dc <BuzzerTOGGLE+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	6b 85       	ldd	r22, Y+11	; 0x0b
    228c:	7c 85       	ldd	r23, Y+12	; 0x0c
    228e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2290:	9e 85       	ldd	r25, Y+14	; 0x0e
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
    22b2:	0f c0       	rjmp	.+30     	; 0x22d2 <BuzzerTOGGLE+0xdc>
    22b4:	88 ec       	ldi	r24, 0xC8	; 200
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9c 83       	std	Y+4, r25	; 0x04
    22ba:	8b 83       	std	Y+3, r24	; 0x03
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <BuzzerTOGGLE+0xca>
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <BuzzerTOGGLE+0xbe>
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <BuzzerTOGGLE+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	9a 81       	ldd	r25, Y+2	; 0x02
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <BuzzerTOGGLE+0x106>
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
	BuzzerOFF();
    2304:	0e 94 ef 10 	call	0x21de	; 0x21de <BuzzerOFF>
}
    2308:	60 96       	adiw	r28, 0x10	; 16
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <main>:
static char password_input[5],username_input[5],command[5], ca,
usernum = 99, passnum = 99 ;
u16 lm35_reading = 0,potentiometer_reading = 0,
		photoresistor_reading = 0,infrared_reading = 0;
void BluetoothRead(char *array);
int main() {
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	c3 5d       	subi	r28, 0xD3	; 211
    2328:	d0 40       	sbci	r29, 0x00	; 0
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61

	/*Pin Directions*/
	DDRA = 0b11000011;
    2334:	ea e3       	ldi	r30, 0x3A	; 58
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	83 ec       	ldi	r24, 0xC3	; 195
    233a:	80 83       	st	Z, r24
	DDRB = 0b11111111;
    233c:	e7 e3       	ldi	r30, 0x37	; 55
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	80 83       	st	Z, r24
	DDRC = 0b11111111;
    2344:	e4 e3       	ldi	r30, 0x34	; 52
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	8f ef       	ldi	r24, 0xFF	; 255
    234a:	80 83       	st	Z, r24
	DDRD = 0b11110010;
    234c:	e1 e3       	ldi	r30, 0x31	; 49
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	82 ef       	ldi	r24, 0xF2	; 242
    2352:	80 83       	st	Z, r24
	//Pulling-up emergency bottoms
	DIO_SetPin_Value(EmergencyBottomPORT,EmergencyBottomPIN , OUTPUT);
    2354:	83 e0       	ldi	r24, 0x03	; 3
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
	DIO_SetPin_Value(EmergencyBottomPORT,EmergencyBottomPIN_STOP , OUTPUT);
    235e:	83 e0       	ldi	r24, 0x03	; 3
    2360:	63 e0       	ldi	r22, 0x03	; 3
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>


	//Peripherals initialization
	LCD8Bit_init();
    2368:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD8Bit_init>
	UART_init();
    236c:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_init>
	ADC_init();
    2370:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <ADC_init>
    Timer0_init();
    2374:	0e 94 89 07 	call	0xf12	; 0xf12 <Timer0_init>
    Timer1_init();
    2378:	0e 94 c1 07 	call	0xf82	; 0xf82 <Timer1_init>
    Timer2_init();
    237c:	0e 94 0d 08 	call	0x101a	; 0x101a <Timer2_init>
    _delay_ms(1000);
    LCD8Bit_Send_Command(0x01);
*/

    while(1){
    	TOG_BIT(PORTA,7);
    2380:	ab e3       	ldi	r26, 0x3B	; 59
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	eb e3       	ldi	r30, 0x3B	; 59
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	90 81       	ld	r25, Z
    238a:	80 e8       	ldi	r24, 0x80	; 128
    238c:	89 27       	eor	r24, r25
    238e:	8c 93       	st	X, r24
    	//Sensor readings
    	lm35_reading = ADC_Read_Sych(2)* 500UL/65536UL;
    2390:	82 e0       	ldi	r24, 0x02	; 2
    2392:	0e 94 a4 0c 	call	0x1948	; 0x1948 <ADC_Read_Sych>
    2396:	cc 01       	movw	r24, r24
    2398:	a0 e0       	ldi	r26, 0x00	; 0
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	24 ef       	ldi	r18, 0xF4	; 244
    239e:	31 e0       	ldi	r19, 0x01	; 1
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__mulsi3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	cd 01       	movw	r24, r26
    23b2:	aa 27       	eor	r26, r26
    23b4:	bb 27       	eor	r27, r27
    23b6:	90 93 48 02 	sts	0x0248, r25
    23ba:	80 93 47 02 	sts	0x0247, r24
    	photoresistor_reading = (ADC_Read_Sych(3)*5000UL)/ 65536UL;
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	0e 94 a4 0c 	call	0x1948	; 0x1948 <ADC_Read_Sych>
    23c4:	cc 01       	movw	r24, r24
    23c6:	a0 e0       	ldi	r26, 0x00	; 0
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	28 e8       	ldi	r18, 0x88	; 136
    23cc:	33 e1       	ldi	r19, 0x13	; 19
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__mulsi3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	cd 01       	movw	r24, r26
    23e0:	aa 27       	eor	r26, r26
    23e2:	bb 27       	eor	r27, r27
    23e4:	90 93 4c 02 	sts	0x024C, r25
    23e8:	80 93 4b 02 	sts	0x024B, r24
    	infrared_reading = ADC_Read_Sych(4) * 5000UL / 65536UL;
    23ec:	84 e0       	ldi	r24, 0x04	; 4
    23ee:	0e 94 a4 0c 	call	0x1948	; 0x1948 <ADC_Read_Sych>
    23f2:	cc 01       	movw	r24, r24
    23f4:	a0 e0       	ldi	r26, 0x00	; 0
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	28 e8       	ldi	r18, 0x88	; 136
    23fa:	33 e1       	ldi	r19, 0x13	; 19
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__mulsi3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	cd 01       	movw	r24, r26
    240e:	aa 27       	eor	r26, r26
    2410:	bb 27       	eor	r27, r27
    2412:	90 93 4e 02 	sts	0x024E, r25
    2416:	80 93 4d 02 	sts	0x024D, r24
    	potentiometer_reading = ADC_Read_Sych(5) * 5UL / 65536UL;
    241a:	85 e0       	ldi	r24, 0x05	; 5
    241c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <ADC_Read_Sych>
    2420:	9c 01       	movw	r18, r24
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	da 01       	movw	r26, r20
    2428:	c9 01       	movw	r24, r18
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	aa 1f       	adc	r26, r26
    2430:	bb 1f       	adc	r27, r27
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	aa 1f       	adc	r26, r26
    2438:	bb 1f       	adc	r27, r27
    243a:	82 0f       	add	r24, r18
    243c:	93 1f       	adc	r25, r19
    243e:	a4 1f       	adc	r26, r20
    2440:	b5 1f       	adc	r27, r21
    2442:	cd 01       	movw	r24, r26
    2444:	aa 27       	eor	r26, r26
    2446:	bb 27       	eor	r27, r27
    2448:	90 93 4a 02 	sts	0x024A, r25
    244c:	80 93 49 02 	sts	0x0249, r24

    	//Automatic (automatic response based on sensor reading)

    	//Servo opens (door)
        ServoAngle(openangle);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ServoAngle>

        //Check if the user wants Something
        ca = UART_Receive();
    2458:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <UART_Receive>
    245c:	80 93 5e 02 	sts	0x025E, r24
        if(ca == '-'){
    2460:	80 91 5e 02 	lds	r24, 0x025E
    2464:	8d 32       	cpi	r24, 0x2D	; 45
    2466:	09 f0       	breq	.+2      	; 0x246a <main+0x150>
    2468:	e7 c3       	rjmp	.+1998   	; 0x2c38 <main+0x91e>
    246a:	fe 01       	movw	r30, r28
    246c:	e1 53       	subi	r30, 0x31	; 49
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a8 ec       	ldi	r26, 0xC8	; 200
    2476:	b2 e4       	ldi	r27, 0x42	; 66
    2478:	80 83       	st	Z, r24
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	a2 83       	std	Z+2, r26	; 0x02
    247e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	8e 01       	movw	r16, r28
    2482:	05 53       	subi	r16, 0x35	; 53
    2484:	1f 4f       	sbci	r17, 0xFF	; 255
    2486:	fe 01       	movw	r30, r28
    2488:	e1 53       	subi	r30, 0x31	; 49
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a ef       	ldi	r20, 0xFA	; 250
    249a:	54 e4       	ldi	r21, 0x44	; 68
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	f8 01       	movw	r30, r16
    24a6:	80 83       	st	Z, r24
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	a2 83       	std	Z+2, r26	; 0x02
    24ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ae:	fe 01       	movw	r30, r28
    24b0:	e5 53       	subi	r30, 0x35	; 53
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	44 f4       	brge	.+16     	; 0x24dc <main+0x1c2>
		__ticks = 1;
    24cc:	fe 01       	movw	r30, r28
    24ce:	e7 53       	subi	r30, 0x37	; 55
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	80 83       	st	Z, r24
    24da:	64 c0       	rjmp	.+200    	; 0x25a4 <main+0x28a>
	else if (__tmp > 65535)
    24dc:	fe 01       	movw	r30, r28
    24de:	e5 53       	subi	r30, 0x35	; 53
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	0c f0       	brlt	.+2      	; 0x24fc <main+0x1e2>
    24fa:	43 c0       	rjmp	.+134    	; 0x2582 <main+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	fe 01       	movw	r30, r28
    24fe:	e1 53       	subi	r30, 0x31	; 49
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8e 01       	movw	r16, r28
    251c:	07 53       	subi	r16, 0x37	; 55
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	f8 01       	movw	r30, r16
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    2532:	1f c0       	rjmp	.+62     	; 0x2572 <main+0x258>
    2534:	fe 01       	movw	r30, r28
    2536:	e9 53       	subi	r30, 0x39	; 57
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	fe 01       	movw	r30, r28
    2544:	e9 53       	subi	r30, 0x39	; 57
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <main+0x232>
    2550:	fe 01       	movw	r30, r28
    2552:	e9 53       	subi	r30, 0x39	; 57
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255a:	de 01       	movw	r26, r28
    255c:	a7 53       	subi	r26, 0x37	; 55
    255e:	bf 4f       	sbci	r27, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	e7 53       	subi	r30, 0x37	; 55
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	11 96       	adiw	r26, 0x01	; 1
    256e:	9c 93       	st	X, r25
    2570:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	fe 01       	movw	r30, r28
    2574:	e7 53       	subi	r30, 0x37	; 55
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	d1 f6       	brne	.-76     	; 0x2534 <main+0x21a>
    2580:	27 c0       	rjmp	.+78     	; 0x25d0 <main+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	8e 01       	movw	r16, r28
    2584:	07 53       	subi	r16, 0x37	; 55
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    2588:	fe 01       	movw	r30, r28
    258a:	e5 53       	subi	r30, 0x35	; 53
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	60 81       	ld	r22, Z
    2590:	71 81       	ldd	r23, Z+1	; 0x01
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	f8 01       	movw	r30, r16
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	de 01       	movw	r26, r28
    25a6:	ab 53       	subi	r26, 0x3B	; 59
    25a8:	bf 4f       	sbci	r27, 0xFF	; 255
    25aa:	fe 01       	movw	r30, r28
    25ac:	e7 53       	subi	r30, 0x37	; 55
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	8d 93       	st	X+, r24
    25b6:	9c 93       	st	X, r25
    25b8:	fe 01       	movw	r30, r28
    25ba:	eb 53       	subi	r30, 0x3B	; 59
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	91 81       	ldd	r25, Z+1	; 0x01
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <main+0x2a8>
    25c6:	fe 01       	movw	r30, r28
    25c8:	eb 53       	subi	r30, 0x3B	; 59
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
        _delay_ms(100);
        LCD8Bit_Send_Command(0x01);
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
        LCD_Send_String("I'm Here");
    25d6:	80 e6       	ldi	r24, 0x60	; 96
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
        LCD_GOTOXY(0,1);
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	61 e0       	ldi	r22, 0x01	; 1
    25e2:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_GOTOXY>
        LCD_Send_String("Sir");
    25e6:	89 e6       	ldi	r24, 0x69	; 105
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
    25ee:	fe 01       	movw	r30, r28
    25f0:	ef 53       	subi	r30, 0x3F	; 63
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	aa e7       	ldi	r26, 0x7A	; 122
    25fa:	b4 e4       	ldi	r27, 0x44	; 68
    25fc:	80 83       	st	Z, r24
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	a2 83       	std	Z+2, r26	; 0x02
    2602:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2604:	8e 01       	movw	r16, r28
    2606:	03 54       	subi	r16, 0x43	; 67
    2608:	1f 4f       	sbci	r17, 0xFF	; 255
    260a:	fe 01       	movw	r30, r28
    260c:	ef 53       	subi	r30, 0x3F	; 63
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a ef       	ldi	r20, 0xFA	; 250
    261e:	54 e4       	ldi	r21, 0x44	; 68
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	f8 01       	movw	r30, r16
    262a:	80 83       	st	Z, r24
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	a2 83       	std	Z+2, r26	; 0x02
    2630:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2632:	fe 01       	movw	r30, r28
    2634:	e3 54       	subi	r30, 0x43	; 67
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	60 81       	ld	r22, Z
    263a:	71 81       	ldd	r23, Z+1	; 0x01
    263c:	82 81       	ldd	r24, Z+2	; 0x02
    263e:	93 81       	ldd	r25, Z+3	; 0x03
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264c:	88 23       	and	r24, r24
    264e:	44 f4       	brge	.+16     	; 0x2660 <main+0x346>
		__ticks = 1;
    2650:	fe 01       	movw	r30, r28
    2652:	e5 54       	subi	r30, 0x45	; 69
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
    265e:	64 c0       	rjmp	.+200    	; 0x2728 <main+0x40e>
	else if (__tmp > 65535)
    2660:	fe 01       	movw	r30, r28
    2662:	e3 54       	subi	r30, 0x43	; 67
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	57 e4       	ldi	r21, 0x47	; 71
    2676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    267a:	18 16       	cp	r1, r24
    267c:	0c f0       	brlt	.+2      	; 0x2680 <main+0x366>
    267e:	43 c0       	rjmp	.+134    	; 0x2706 <main+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	fe 01       	movw	r30, r28
    2682:	ef 53       	subi	r30, 0x3F	; 63
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e2       	ldi	r20, 0x20	; 32
    2694:	51 e4       	ldi	r21, 0x41	; 65
    2696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	8e 01       	movw	r16, r28
    26a0:	05 54       	subi	r16, 0x45	; 69
    26a2:	1f 4f       	sbci	r17, 0xFF	; 255
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	f8 01       	movw	r30, r16
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	80 83       	st	Z, r24
    26b6:	1f c0       	rjmp	.+62     	; 0x26f6 <main+0x3dc>
    26b8:	fe 01       	movw	r30, r28
    26ba:	e7 54       	subi	r30, 0x47	; 71
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	88 ec       	ldi	r24, 0xC8	; 200
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	80 83       	st	Z, r24
    26c6:	fe 01       	movw	r30, r28
    26c8:	e7 54       	subi	r30, 0x47	; 71
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 81       	ld	r24, Z
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <main+0x3b6>
    26d4:	fe 01       	movw	r30, r28
    26d6:	e7 54       	subi	r30, 0x47	; 71
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26de:	de 01       	movw	r26, r28
    26e0:	a5 54       	subi	r26, 0x45	; 69
    26e2:	bf 4f       	sbci	r27, 0xFF	; 255
    26e4:	fe 01       	movw	r30, r28
    26e6:	e5 54       	subi	r30, 0x45	; 69
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	11 96       	adiw	r26, 0x01	; 1
    26f2:	9c 93       	st	X, r25
    26f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f6:	fe 01       	movw	r30, r28
    26f8:	e5 54       	subi	r30, 0x45	; 69
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	d1 f6       	brne	.-76     	; 0x26b8 <main+0x39e>
    2704:	27 c0       	rjmp	.+78     	; 0x2754 <main+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2706:	8e 01       	movw	r16, r28
    2708:	05 54       	subi	r16, 0x45	; 69
    270a:	1f 4f       	sbci	r17, 0xFF	; 255
    270c:	fe 01       	movw	r30, r28
    270e:	e3 54       	subi	r30, 0x43	; 67
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	f8 01       	movw	r30, r16
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
    2728:	de 01       	movw	r26, r28
    272a:	a9 54       	subi	r26, 0x49	; 73
    272c:	bf 4f       	sbci	r27, 0xFF	; 255
    272e:	fe 01       	movw	r30, r28
    2730:	e5 54       	subi	r30, 0x45	; 69
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	8d 93       	st	X+, r24
    273a:	9c 93       	st	X, r25
    273c:	fe 01       	movw	r30, r28
    273e:	e9 54       	subi	r30, 0x49	; 73
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <main+0x42c>
    274a:	fe 01       	movw	r30, r28
    274c:	e9 54       	subi	r30, 0x49	; 73
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
        _delay_ms(1000);
        LCD8Bit_Send_Command(0x01);
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
        LCD_Send_String("Command:");
    275a:	8d e6       	ldi	r24, 0x6D	; 109
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
    	BluetoothRead(command);
    2762:	89 e5       	ldi	r24, 0x59	; 89
    2764:	92 e0       	ldi	r25, 0x02	; 2
    2766:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <BluetoothRead>
        LCD8Bit_Send_Command(0x01);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
        if(strcmp(command,shutdoor)==0){
    2770:	89 e5       	ldi	r24, 0x59	; 89
    2772:	92 e0       	ldi	r25, 0x02	; 2
    2774:	2e ec       	ldi	r18, 0xCE	; 206
    2776:	31 e0       	ldi	r19, 0x01	; 1
    2778:	b9 01       	movw	r22, r18
    277a:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <strcmp>
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	09 f0       	breq	.+2      	; 0x2784 <main+0x46a>
    2782:	c6 c0       	rjmp	.+396    	; 0x2910 <main+0x5f6>
           LCD_Send_String("Closing");
    2784:	86 e7       	ldi	r24, 0x76	; 118
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
           LCD_GOTOXY(0,1);
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	61 e0       	ldi	r22, 0x01	; 1
    2790:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_GOTOXY>
           LCD_Send_String("the door...");
    2794:	8e e7       	ldi	r24, 0x7E	; 126
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
           ServoAngle(closeangle);
    279c:	86 ea       	ldi	r24, 0xA6	; 166
    279e:	9f ef       	ldi	r25, 0xFF	; 255
    27a0:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ServoAngle>
    27a4:	fe 01       	movw	r30, r28
    27a6:	ed 54       	subi	r30, 0x4D	; 77
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	aa e7       	ldi	r26, 0x7A	; 122
    27b0:	b4 e4       	ldi	r27, 0x44	; 68
    27b2:	80 83       	st	Z, r24
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	a2 83       	std	Z+2, r26	; 0x02
    27b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	8e 01       	movw	r16, r28
    27bc:	01 55       	subi	r16, 0x51	; 81
    27be:	1f 4f       	sbci	r17, 0xFF	; 255
    27c0:	fe 01       	movw	r30, r28
    27c2:	ed 54       	subi	r30, 0x4D	; 77
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a ef       	ldi	r20, 0xFA	; 250
    27d4:	54 e4       	ldi	r21, 0x44	; 68
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	f8 01       	movw	r30, r16
    27e0:	80 83       	st	Z, r24
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	a2 83       	std	Z+2, r26	; 0x02
    27e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e8:	fe 01       	movw	r30, r28
    27ea:	e1 55       	subi	r30, 0x51	; 81
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e8       	ldi	r20, 0x80	; 128
    27fc:	5f e3       	ldi	r21, 0x3F	; 63
    27fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2802:	88 23       	and	r24, r24
    2804:	44 f4       	brge	.+16     	; 0x2816 <main+0x4fc>
		__ticks = 1;
    2806:	fe 01       	movw	r30, r28
    2808:	e3 55       	subi	r30, 0x53	; 83
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	64 c0       	rjmp	.+200    	; 0x28de <main+0x5c4>
	else if (__tmp > 65535)
    2816:	fe 01       	movw	r30, r28
    2818:	e1 55       	subi	r30, 0x51	; 81
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	60 81       	ld	r22, Z
    281e:	71 81       	ldd	r23, Z+1	; 0x01
    2820:	82 81       	ldd	r24, Z+2	; 0x02
    2822:	93 81       	ldd	r25, Z+3	; 0x03
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	3f ef       	ldi	r19, 0xFF	; 255
    2828:	4f e7       	ldi	r20, 0x7F	; 127
    282a:	57 e4       	ldi	r21, 0x47	; 71
    282c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2830:	18 16       	cp	r1, r24
    2832:	0c f0       	brlt	.+2      	; 0x2836 <main+0x51c>
    2834:	43 c0       	rjmp	.+134    	; 0x28bc <main+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2836:	fe 01       	movw	r30, r28
    2838:	ed 54       	subi	r30, 0x4D	; 77
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	8e 01       	movw	r16, r28
    2856:	03 55       	subi	r16, 0x53	; 83
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	f8 01       	movw	r30, r16
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	80 83       	st	Z, r24
    286c:	1f c0       	rjmp	.+62     	; 0x28ac <main+0x592>
    286e:	fe 01       	movw	r30, r28
    2870:	e5 55       	subi	r30, 0x55	; 85
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24
    287c:	fe 01       	movw	r30, r28
    287e:	e5 55       	subi	r30, 0x55	; 85
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	91 81       	ldd	r25, Z+1	; 0x01
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <main+0x56c>
    288a:	fe 01       	movw	r30, r28
    288c:	e5 55       	subi	r30, 0x55	; 85
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	de 01       	movw	r26, r28
    2896:	a3 55       	subi	r26, 0x53	; 83
    2898:	bf 4f       	sbci	r27, 0xFF	; 255
    289a:	fe 01       	movw	r30, r28
    289c:	e3 55       	subi	r30, 0x53	; 83
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	11 96       	adiw	r26, 0x01	; 1
    28a8:	9c 93       	st	X, r25
    28aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ac:	fe 01       	movw	r30, r28
    28ae:	e3 55       	subi	r30, 0x53	; 83
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	d1 f6       	brne	.-76     	; 0x286e <main+0x554>
    28ba:	27 c0       	rjmp	.+78     	; 0x290a <main+0x5f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	8e 01       	movw	r16, r28
    28be:	03 55       	subi	r16, 0x53	; 83
    28c0:	1f 4f       	sbci	r17, 0xFF	; 255
    28c2:	fe 01       	movw	r30, r28
    28c4:	e1 55       	subi	r30, 0x51	; 81
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	60 81       	ld	r22, Z
    28ca:	71 81       	ldd	r23, Z+1	; 0x01
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	93 81       	ldd	r25, Z+3	; 0x03
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	f8 01       	movw	r30, r16
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
    28de:	de 01       	movw	r26, r28
    28e0:	a7 55       	subi	r26, 0x57	; 87
    28e2:	bf 4f       	sbci	r27, 0xFF	; 255
    28e4:	fe 01       	movw	r30, r28
    28e6:	e3 55       	subi	r30, 0x53	; 83
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	80 81       	ld	r24, Z
    28ec:	91 81       	ldd	r25, Z+1	; 0x01
    28ee:	8d 93       	st	X+, r24
    28f0:	9c 93       	st	X, r25
    28f2:	fe 01       	movw	r30, r28
    28f4:	e7 55       	subi	r30, 0x57	; 87
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 81       	ld	r24, Z
    28fa:	91 81       	ldd	r25, Z+1	; 0x01
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <main+0x5e2>
    2900:	fe 01       	movw	r30, r28
    2902:	e7 55       	subi	r30, 0x57	; 87
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
           _delay_ms(1000);
           LCD8Bit_Send_Command(0x01);
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
           }
        if(strcmp(command,opendoor)==0){
    2910:	89 e5       	ldi	r24, 0x59	; 89
    2912:	92 e0       	ldi	r25, 0x02	; 2
    2914:	23 ed       	ldi	r18, 0xD3	; 211
    2916:	31 e0       	ldi	r19, 0x01	; 1
    2918:	b9 01       	movw	r22, r18
    291a:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <strcmp>
    291e:	00 97       	sbiw	r24, 0x00	; 0
    2920:	09 f0       	breq	.+2      	; 0x2924 <main+0x60a>
    2922:	c6 c0       	rjmp	.+396    	; 0x2ab0 <main+0x796>
                  LCD_Send_String("Opening");
    2924:	8a e8       	ldi	r24, 0x8A	; 138
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
                  LCD_GOTOXY(0,1);
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_GOTOXY>
                  LCD_Send_String("the door...");
    2934:	8e e7       	ldi	r24, 0x7E	; 126
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
                  ServoAngle(openangle);
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ServoAngle>
    2944:	fe 01       	movw	r30, r28
    2946:	eb 55       	subi	r30, 0x5B	; 91
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	aa e7       	ldi	r26, 0x7A	; 122
    2950:	b4 e4       	ldi	r27, 0x44	; 68
    2952:	80 83       	st	Z, r24
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	a2 83       	std	Z+2, r26	; 0x02
    2958:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295a:	8e 01       	movw	r16, r28
    295c:	0f 55       	subi	r16, 0x5F	; 95
    295e:	1f 4f       	sbci	r17, 0xFF	; 255
    2960:	fe 01       	movw	r30, r28
    2962:	eb 55       	subi	r30, 0x5B	; 91
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	4a ef       	ldi	r20, 0xFA	; 250
    2974:	54 e4       	ldi	r21, 0x44	; 68
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	f8 01       	movw	r30, r16
    2980:	80 83       	st	Z, r24
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	a2 83       	std	Z+2, r26	; 0x02
    2986:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2988:	fe 01       	movw	r30, r28
    298a:	ef 55       	subi	r30, 0x5F	; 95
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	5f e3       	ldi	r21, 0x3F	; 63
    299e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a2:	88 23       	and	r24, r24
    29a4:	44 f4       	brge	.+16     	; 0x29b6 <main+0x69c>
		__ticks = 1;
    29a6:	fe 01       	movw	r30, r28
    29a8:	e1 56       	subi	r30, 0x61	; 97
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	80 83       	st	Z, r24
    29b4:	64 c0       	rjmp	.+200    	; 0x2a7e <main+0x764>
	else if (__tmp > 65535)
    29b6:	fe 01       	movw	r30, r28
    29b8:	ef 55       	subi	r30, 0x5F	; 95
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	3f ef       	ldi	r19, 0xFF	; 255
    29c8:	4f e7       	ldi	r20, 0x7F	; 127
    29ca:	57 e4       	ldi	r21, 0x47	; 71
    29cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d0:	18 16       	cp	r1, r24
    29d2:	0c f0       	brlt	.+2      	; 0x29d6 <main+0x6bc>
    29d4:	43 c0       	rjmp	.+134    	; 0x2a5c <main+0x742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	fe 01       	movw	r30, r28
    29d8:	eb 55       	subi	r30, 0x5B	; 91
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e2       	ldi	r20, 0x20	; 32
    29ea:	51 e4       	ldi	r21, 0x41	; 65
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	8e 01       	movw	r16, r28
    29f6:	01 56       	subi	r16, 0x61	; 97
    29f8:	1f 4f       	sbci	r17, 0xFF	; 255
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	f8 01       	movw	r30, r16
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	1f c0       	rjmp	.+62     	; 0x2a4c <main+0x732>
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e3 56       	subi	r30, 0x63	; 99
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	88 ec       	ldi	r24, 0xC8	; 200
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	80 83       	st	Z, r24
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e3 56       	subi	r30, 0x63	; 99
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 81       	ld	r24, Z
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <main+0x70c>
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e3 56       	subi	r30, 0x63	; 99
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	de 01       	movw	r26, r28
    2a36:	a1 56       	subi	r26, 0x61	; 97
    2a38:	bf 4f       	sbci	r27, 0xFF	; 255
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e1 56       	subi	r30, 0x61	; 97
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	11 96       	adiw	r26, 0x01	; 1
    2a48:	9c 93       	st	X, r25
    2a4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e1 56       	subi	r30, 0x61	; 97
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	d1 f6       	brne	.-76     	; 0x2a0e <main+0x6f4>
    2a5a:	27 c0       	rjmp	.+78     	; 0x2aaa <main+0x790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5c:	8e 01       	movw	r16, r28
    2a5e:	01 56       	subi	r16, 0x61	; 97
    2a60:	1f 4f       	sbci	r17, 0xFF	; 255
    2a62:	fe 01       	movw	r30, r28
    2a64:	ef 55       	subi	r30, 0x5F	; 95
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	60 81       	ld	r22, Z
    2a6a:	71 81       	ldd	r23, Z+1	; 0x01
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	f8 01       	movw	r30, r16
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	80 83       	st	Z, r24
    2a7e:	de 01       	movw	r26, r28
    2a80:	a5 56       	subi	r26, 0x65	; 101
    2a82:	bf 4f       	sbci	r27, 0xFF	; 255
    2a84:	fe 01       	movw	r30, r28
    2a86:	e1 56       	subi	r30, 0x61	; 97
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 81       	ld	r24, Z
    2a8c:	91 81       	ldd	r25, Z+1	; 0x01
    2a8e:	8d 93       	st	X+, r24
    2a90:	9c 93       	st	X, r25
    2a92:	fe 01       	movw	r30, r28
    2a94:	e5 56       	subi	r30, 0x65	; 101
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	91 81       	ldd	r25, Z+1	; 0x01
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <main+0x782>
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e5 56       	subi	r30, 0x65	; 101
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
                  _delay_ms(1000);
                  LCD8Bit_Send_Command(0x01);
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
                  }
        if(strcmp(command,heavyload1)==0){
    2ab0:	89 e5       	ldi	r24, 0x59	; 89
    2ab2:	92 e0       	ldi	r25, 0x02	; 2
    2ab4:	28 ed       	ldi	r18, 0xD8	; 216
    2ab6:	31 e0       	ldi	r19, 0x01	; 1
    2ab8:	b9 01       	movw	r22, r18
    2aba:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <strcmp>
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <main+0x7aa>
    2ac2:	ba c0       	rjmp	.+372    	; 0x2c38 <main+0x91e>
           LCD_Send_String("Heavy load ON");
    2ac4:	82 e9       	ldi	r24, 0x92	; 146
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
    2acc:	fe 01       	movw	r30, r28
    2ace:	e9 56       	subi	r30, 0x69	; 105
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	aa e7       	ldi	r26, 0x7A	; 122
    2ad8:	b4 e4       	ldi	r27, 0x44	; 68
    2ada:	80 83       	st	Z, r24
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	a2 83       	std	Z+2, r26	; 0x02
    2ae0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	0d 56       	subi	r16, 0x6D	; 109
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e9 56       	subi	r30, 0x69	; 105
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4a ef       	ldi	r20, 0xFA	; 250
    2afc:	54 e4       	ldi	r21, 0x44	; 68
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	f8 01       	movw	r30, r16
    2b08:	80 83       	st	Z, r24
    2b0a:	91 83       	std	Z+1, r25	; 0x01
    2b0c:	a2 83       	std	Z+2, r26	; 0x02
    2b0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b10:	fe 01       	movw	r30, r28
    2b12:	ed 56       	subi	r30, 0x6D	; 109
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e8       	ldi	r20, 0x80	; 128
    2b24:	5f e3       	ldi	r21, 0x3F	; 63
    2b26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	44 f4       	brge	.+16     	; 0x2b3e <main+0x824>
		__ticks = 1;
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ef 56       	subi	r30, 0x6F	; 111
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24
    2b3c:	64 c0       	rjmp	.+200    	; 0x2c06 <main+0x8ec>
	else if (__tmp > 65535)
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ed 56       	subi	r30, 0x6D	; 109
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	60 81       	ld	r22, Z
    2b46:	71 81       	ldd	r23, Z+1	; 0x01
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	93 81       	ldd	r25, Z+3	; 0x03
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	3f ef       	ldi	r19, 0xFF	; 255
    2b50:	4f e7       	ldi	r20, 0x7F	; 127
    2b52:	57 e4       	ldi	r21, 0x47	; 71
    2b54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b58:	18 16       	cp	r1, r24
    2b5a:	0c f0       	brlt	.+2      	; 0x2b5e <main+0x844>
    2b5c:	43 c0       	rjmp	.+134    	; 0x2be4 <main+0x8ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e9 56       	subi	r30, 0x69	; 105
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	60 81       	ld	r22, Z
    2b66:	71 81       	ldd	r23, Z+1	; 0x01
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e2       	ldi	r20, 0x20	; 32
    2b72:	51 e4       	ldi	r21, 0x41	; 65
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8e 01       	movw	r16, r28
    2b7e:	0f 56       	subi	r16, 0x6F	; 111
    2b80:	1f 4f       	sbci	r17, 0xFF	; 255
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	f8 01       	movw	r30, r16
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	1f c0       	rjmp	.+62     	; 0x2bd4 <main+0x8ba>
    2b96:	fe 01       	movw	r30, r28
    2b98:	e1 57       	subi	r30, 0x71	; 113
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	88 ec       	ldi	r24, 0xC8	; 200
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e1 57       	subi	r30, 0x71	; 113
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <main+0x894>
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e1 57       	subi	r30, 0x71	; 113
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbc:	de 01       	movw	r26, r28
    2bbe:	af 56       	subi	r26, 0x6F	; 111
    2bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ef 56       	subi	r30, 0x6F	; 111
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	11 96       	adiw	r26, 0x01	; 1
    2bd0:	9c 93       	st	X, r25
    2bd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ef 56       	subi	r30, 0x6F	; 111
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	d1 f6       	brne	.-76     	; 0x2b96 <main+0x87c>
    2be2:	27 c0       	rjmp	.+78     	; 0x2c32 <main+0x918>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be4:	8e 01       	movw	r16, r28
    2be6:	0f 56       	subi	r16, 0x6F	; 111
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	ed 56       	subi	r30, 0x6D	; 109
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	f8 01       	movw	r30, r16
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	80 83       	st	Z, r24
    2c06:	de 01       	movw	r26, r28
    2c08:	a3 57       	subi	r26, 0x73	; 115
    2c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	ef 56       	subi	r30, 0x6F	; 111
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 81       	ld	r24, Z
    2c14:	91 81       	ldd	r25, Z+1	; 0x01
    2c16:	8d 93       	st	X+, r24
    2c18:	9c 93       	st	X, r25
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e3 57       	subi	r30, 0x73	; 115
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 81       	ld	r24, Z
    2c22:	91 81       	ldd	r25, Z+1	; 0x01
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	f1 f7       	brne	.-4      	; 0x2c24 <main+0x90a>
    2c28:	fe 01       	movw	r30, r28
    2c2a:	e3 57       	subi	r30, 0x73	; 115
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	91 83       	std	Z+1, r25	; 0x01
    2c30:	80 83       	st	Z, r24
           /*DIO_SetPin_Value();*/
           _delay_ms(1000);
           LCD8Bit_Send_Command(0x01);
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
           }
        }

    	//Temperature
        if(lm35_reading > MAX_TEMP){
    2c38:	80 91 47 02 	lds	r24, 0x0247
    2c3c:	90 91 48 02 	lds	r25, 0x0248
    2c40:	8e 32       	cpi	r24, 0x2E	; 46
    2c42:	91 05       	cpc	r25, r1
    2c44:	20 f0       	brcs	.+8      	; 0x2c4e <main+0x934>
        	BuzzerTOGGLE(1000);
    2c46:	88 ee       	ldi	r24, 0xE8	; 232
    2c48:	93 e0       	ldi	r25, 0x03	; 3
    2c4a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <BuzzerTOGGLE>
        }
        //Light System
        if(photoresistor_reading < MIN_LIGHT){
    2c4e:	80 91 4b 02 	lds	r24, 0x024B
    2c52:	90 91 4c 02 	lds	r25, 0x024C
    2c56:	f1 e0       	ldi	r31, 0x01	; 1
    2c58:	80 39       	cpi	r24, 0x90	; 144
    2c5a:	9f 07       	cpc	r25, r31
    2c5c:	28 f4       	brcc	.+10     	; 0x2c68 <main+0x94e>
        	DIO_SetPin_Value(lamp220PORT,lamp220PIN,HIGH);
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	65 e0       	ldi	r22, 0x05	; 5
    2c62:	41 e0       	ldi	r20, 0x01	; 1
    2c64:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
        }
        if(photoresistor_reading >= MIN_LIGHT){
    2c68:	80 91 4b 02 	lds	r24, 0x024B
    2c6c:	90 91 4c 02 	lds	r25, 0x024C
    2c70:	21 e0       	ldi	r18, 0x01	; 1
    2c72:	80 39       	cpi	r24, 0x90	; 144
    2c74:	92 07       	cpc	r25, r18
    2c76:	28 f0       	brcs	.+10     	; 0x2c82 <main+0x968>
        	DIO_SetPin_Value(lamp220PORT,lamp220PIN,LOW);
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	65 e0       	ldi	r22, 0x05	; 5
    2c7c:	40 e0       	ldi	r20, 0x00	; 0
    2c7e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
    2c82:	fe 01       	movw	r30, r28
    2c84:	e7 57       	subi	r30, 0x77	; 119
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	a0 e8       	ldi	r26, 0x80	; 128
    2c8e:	bf e3       	ldi	r27, 0x3F	; 63
    2c90:	80 83       	st	Z, r24
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	a2 83       	std	Z+2, r26	; 0x02
    2c96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c98:	8e 01       	movw	r16, r28
    2c9a:	0b 57       	subi	r16, 0x7B	; 123
    2c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e7 57       	subi	r30, 0x77	; 119
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	60 81       	ld	r22, Z
    2ca6:	71 81       	ldd	r23, Z+1	; 0x01
    2ca8:	82 81       	ldd	r24, Z+2	; 0x02
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4a ef       	ldi	r20, 0xFA	; 250
    2cb2:	54 e4       	ldi	r21, 0x44	; 68
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	f8 01       	movw	r30, r16
    2cbe:	80 83       	st	Z, r24
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	a2 83       	std	Z+2, r26	; 0x02
    2cc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	eb 57       	subi	r30, 0x7B	; 123
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	60 81       	ld	r22, Z
    2cce:	71 81       	ldd	r23, Z+1	; 0x01
    2cd0:	82 81       	ldd	r24, Z+2	; 0x02
    2cd2:	93 81       	ldd	r25, Z+3	; 0x03
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e8       	ldi	r20, 0x80	; 128
    2cda:	5f e3       	ldi	r21, 0x3F	; 63
    2cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ce0:	88 23       	and	r24, r24
    2ce2:	44 f4       	brge	.+16     	; 0x2cf4 <main+0x9da>
		__ticks = 1;
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ed 57       	subi	r30, 0x7D	; 125
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
    2cf2:	64 c0       	rjmp	.+200    	; 0x2dbc <main+0xaa2>
	else if (__tmp > 65535)
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	eb 57       	subi	r30, 0x7B	; 123
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	60 81       	ld	r22, Z
    2cfc:	71 81       	ldd	r23, Z+1	; 0x01
    2cfe:	82 81       	ldd	r24, Z+2	; 0x02
    2d00:	93 81       	ldd	r25, Z+3	; 0x03
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	3f ef       	ldi	r19, 0xFF	; 255
    2d06:	4f e7       	ldi	r20, 0x7F	; 127
    2d08:	57 e4       	ldi	r21, 0x47	; 71
    2d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d0e:	18 16       	cp	r1, r24
    2d10:	0c f0       	brlt	.+2      	; 0x2d14 <main+0x9fa>
    2d12:	43 c0       	rjmp	.+134    	; 0x2d9a <main+0xa80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	fe 01       	movw	r30, r28
    2d16:	e7 57       	subi	r30, 0x77	; 119
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	60 81       	ld	r22, Z
    2d1c:	71 81       	ldd	r23, Z+1	; 0x01
    2d1e:	82 81       	ldd	r24, Z+2	; 0x02
    2d20:	93 81       	ldd	r25, Z+3	; 0x03
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e2       	ldi	r20, 0x20	; 32
    2d28:	51 e4       	ldi	r21, 0x41	; 65
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8e 01       	movw	r16, r28
    2d34:	0d 57       	subi	r16, 0x7D	; 125
    2d36:	1f 4f       	sbci	r17, 0xFF	; 255
    2d38:	bc 01       	movw	r22, r24
    2d3a:	cd 01       	movw	r24, r26
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	f8 01       	movw	r30, r16
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	80 83       	st	Z, r24
    2d4a:	1f c0       	rjmp	.+62     	; 0x2d8a <main+0xa70>
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	ef 57       	subi	r30, 0x7F	; 127
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	88 ec       	ldi	r24, 0xC8	; 200
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	91 83       	std	Z+1, r25	; 0x01
    2d58:	80 83       	st	Z, r24
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	ef 57       	subi	r30, 0x7F	; 127
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	80 81       	ld	r24, Z
    2d62:	91 81       	ldd	r25, Z+1	; 0x01
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <main+0xa4a>
    2d68:	fe 01       	movw	r30, r28
    2d6a:	ef 57       	subi	r30, 0x7F	; 127
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d72:	de 01       	movw	r26, r28
    2d74:	ad 57       	subi	r26, 0x7D	; 125
    2d76:	bf 4f       	sbci	r27, 0xFF	; 255
    2d78:	fe 01       	movw	r30, r28
    2d7a:	ed 57       	subi	r30, 0x7D	; 125
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	91 81       	ldd	r25, Z+1	; 0x01
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	11 96       	adiw	r26, 0x01	; 1
    2d86:	9c 93       	st	X, r25
    2d88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	ed 57       	subi	r30, 0x7D	; 125
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	80 81       	ld	r24, Z
    2d92:	91 81       	ldd	r25, Z+1	; 0x01
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	d1 f6       	brne	.-76     	; 0x2d4c <main+0xa32>
    2d98:	28 c0       	rjmp	.+80     	; 0x2dea <main+0xad0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9a:	8e 01       	movw	r16, r28
    2d9c:	0d 57       	subi	r16, 0x7D	; 125
    2d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2da0:	fe 01       	movw	r30, r28
    2da2:	eb 57       	subi	r30, 0x7B	; 123
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	60 81       	ld	r22, Z
    2da8:	71 81       	ldd	r23, Z+1	; 0x01
    2daa:	82 81       	ldd	r24, Z+2	; 0x02
    2dac:	93 81       	ldd	r25, Z+3	; 0x03
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	f8 01       	movw	r30, r16
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	80 83       	st	Z, r24
    2dbc:	de 01       	movw	r26, r28
    2dbe:	a1 58       	subi	r26, 0x81	; 129
    2dc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ed 57       	subi	r30, 0x7D	; 125
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 81       	ld	r24, Z
    2dca:	91 81       	ldd	r25, Z+1	; 0x01
    2dcc:	11 96       	adiw	r26, 0x01	; 1
    2dce:	9c 93       	st	X, r25
    2dd0:	8e 93       	st	-X, r24
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e1 58       	subi	r30, 0x81	; 129
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	80 81       	ld	r24, Z
    2dda:	91 81       	ldd	r25, Z+1	; 0x01
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <main+0xac2>
    2de0:	fe 01       	movw	r30, r28
    2de2:	e1 58       	subi	r30, 0x81	; 129
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	80 83       	st	Z, r24
        //Emergency
        /*Emergency is done by interrupt*/
        _delay_ms(1);

        //Set motor fan of lm35
        if(lm35_reading>15 && lm35_reading<20 )
    2dea:	80 91 47 02 	lds	r24, 0x0247
    2dee:	90 91 48 02 	lds	r25, 0x0248
    2df2:	80 31       	cpi	r24, 0x10	; 16
    2df4:	91 05       	cpc	r25, r1
    2df6:	58 f0       	brcs	.+22     	; 0x2e0e <main+0xaf4>
    2df8:	80 91 47 02 	lds	r24, 0x0247
    2dfc:	90 91 48 02 	lds	r25, 0x0248
    2e00:	84 31       	cpi	r24, 0x14	; 20
    2e02:	91 05       	cpc	r25, r1
    2e04:	20 f4       	brcc	.+8      	; 0x2e0e <main+0xaf4>
            OCR2 = 50;
    2e06:	e3 e4       	ldi	r30, 0x43	; 67
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	82 e3       	ldi	r24, 0x32	; 50
    2e0c:	80 83       	st	Z, r24
        if(lm35_reading<20 && lm35_reading>15)
    2e0e:	80 91 47 02 	lds	r24, 0x0247
    2e12:	90 91 48 02 	lds	r25, 0x0248
    2e16:	84 31       	cpi	r24, 0x14	; 20
    2e18:	91 05       	cpc	r25, r1
    2e1a:	58 f4       	brcc	.+22     	; 0x2e32 <main+0xb18>
    2e1c:	80 91 47 02 	lds	r24, 0x0247
    2e20:	90 91 48 02 	lds	r25, 0x0248
    2e24:	80 31       	cpi	r24, 0x10	; 16
    2e26:	91 05       	cpc	r25, r1
    2e28:	20 f0       	brcs	.+8      	; 0x2e32 <main+0xb18>
            OCR2 = 100;
    2e2a:	e3 e4       	ldi	r30, 0x43	; 67
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	84 e6       	ldi	r24, 0x64	; 100
    2e30:	80 83       	st	Z, r24
        if(lm35_reading<25 && lm35_reading>20)
    2e32:	80 91 47 02 	lds	r24, 0x0247
    2e36:	90 91 48 02 	lds	r25, 0x0248
    2e3a:	89 31       	cpi	r24, 0x19	; 25
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	58 f4       	brcc	.+22     	; 0x2e56 <main+0xb3c>
    2e40:	80 91 47 02 	lds	r24, 0x0247
    2e44:	90 91 48 02 	lds	r25, 0x0248
    2e48:	85 31       	cpi	r24, 0x15	; 21
    2e4a:	91 05       	cpc	r25, r1
    2e4c:	20 f0       	brcs	.+8      	; 0x2e56 <main+0xb3c>
            OCR2 = 150;
    2e4e:	e3 e4       	ldi	r30, 0x43	; 67
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	86 e9       	ldi	r24, 0x96	; 150
    2e54:	80 83       	st	Z, r24
        if(lm35_reading>25)
    2e56:	80 91 47 02 	lds	r24, 0x0247
    2e5a:	90 91 48 02 	lds	r25, 0x0248
    2e5e:	8a 31       	cpi	r24, 0x1A	; 26
    2e60:	91 05       	cpc	r25, r1
    2e62:	20 f0       	brcs	.+8      	; 0x2e6c <main+0xb52>
            OCR2 = 250;
    2e64:	e3 e4       	ldi	r30, 0x43	; 67
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	8a ef       	ldi	r24, 0xFA	; 250
    2e6a:	80 83       	st	Z, r24

        //Set motor fan by Variable Resitor
        OCR0_REG = potentiometer_reading*60UL;
    2e6c:	0c e5       	ldi	r16, 0x5C	; 92
    2e6e:	10 e0       	ldi	r17, 0x00	; 0
    2e70:	80 91 49 02 	lds	r24, 0x0249
    2e74:	90 91 4a 02 	lds	r25, 0x024A
    2e78:	cc 01       	movw	r24, r24
    2e7a:	a0 e0       	ldi	r26, 0x00	; 0
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	2c e3       	ldi	r18, 0x3C	; 60
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	50 e0       	ldi	r21, 0x00	; 0
    2e86:	bc 01       	movw	r22, r24
    2e88:	cd 01       	movw	r24, r26
    2e8a:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__mulsi3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	f8 01       	movw	r30, r16
    2e94:	80 83       	st	Z, r24


    	/***********************************************************/
    	/******************   Display Readings   *******************/
    	/***********************************************************/
        LCD_Send_String("Temperature:");
    2e96:	80 ea       	ldi	r24, 0xA0	; 160
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
	    LCD_Send_Int(lm35_reading);
    2e9e:	80 91 47 02 	lds	r24, 0x0247
    2ea2:	90 91 48 02 	lds	r25, 0x0248
    2ea6:	0e 94 48 10 	call	0x2090	; 0x2090 <LCD_Send_Int>
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e5 58       	subi	r30, 0x85	; 133
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	aa ef       	ldi	r26, 0xFA	; 250
    2eb6:	b3 e4       	ldi	r27, 0x43	; 67
    2eb8:	80 83       	st	Z, r24
    2eba:	91 83       	std	Z+1, r25	; 0x01
    2ebc:	a2 83       	std	Z+2, r26	; 0x02
    2ebe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec0:	8e 01       	movw	r16, r28
    2ec2:	09 58       	subi	r16, 0x89	; 137
    2ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e5 58       	subi	r30, 0x85	; 133
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	4a ef       	ldi	r20, 0xFA	; 250
    2eda:	54 e4       	ldi	r21, 0x44	; 68
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	f8 01       	movw	r30, r16
    2ee6:	80 83       	st	Z, r24
    2ee8:	91 83       	std	Z+1, r25	; 0x01
    2eea:	a2 83       	std	Z+2, r26	; 0x02
    2eec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e9 58       	subi	r30, 0x89	; 137
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e8       	ldi	r20, 0x80	; 128
    2f02:	5f e3       	ldi	r21, 0x3F	; 63
    2f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f08:	88 23       	and	r24, r24
    2f0a:	44 f4       	brge	.+16     	; 0x2f1c <main+0xc02>
		__ticks = 1;
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	eb 58       	subi	r30, 0x8B	; 139
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	91 83       	std	Z+1, r25	; 0x01
    2f18:	80 83       	st	Z, r24
    2f1a:	64 c0       	rjmp	.+200    	; 0x2fe4 <main+0xcca>
	else if (__tmp > 65535)
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e9 58       	subi	r30, 0x89	; 137
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	60 81       	ld	r22, Z
    2f24:	71 81       	ldd	r23, Z+1	; 0x01
    2f26:	82 81       	ldd	r24, Z+2	; 0x02
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	3f ef       	ldi	r19, 0xFF	; 255
    2f2e:	4f e7       	ldi	r20, 0x7F	; 127
    2f30:	57 e4       	ldi	r21, 0x47	; 71
    2f32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f36:	18 16       	cp	r1, r24
    2f38:	0c f0       	brlt	.+2      	; 0x2f3c <main+0xc22>
    2f3a:	43 c0       	rjmp	.+134    	; 0x2fc2 <main+0xca8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e5 58       	subi	r30, 0x85	; 133
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	60 81       	ld	r22, Z
    2f44:	71 81       	ldd	r23, Z+1	; 0x01
    2f46:	82 81       	ldd	r24, Z+2	; 0x02
    2f48:	93 81       	ldd	r25, Z+3	; 0x03
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e2       	ldi	r20, 0x20	; 32
    2f50:	51 e4       	ldi	r21, 0x41	; 65
    2f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	8e 01       	movw	r16, r28
    2f5c:	0b 58       	subi	r16, 0x8B	; 139
    2f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f60:	bc 01       	movw	r22, r24
    2f62:	cd 01       	movw	r24, r26
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
    2f72:	1f c0       	rjmp	.+62     	; 0x2fb2 <main+0xc98>
    2f74:	fe 01       	movw	r30, r28
    2f76:	ed 58       	subi	r30, 0x8D	; 141
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	88 ec       	ldi	r24, 0xC8	; 200
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	80 83       	st	Z, r24
    2f82:	fe 01       	movw	r30, r28
    2f84:	ed 58       	subi	r30, 0x8D	; 141
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <main+0xc72>
    2f90:	fe 01       	movw	r30, r28
    2f92:	ed 58       	subi	r30, 0x8D	; 141
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	91 83       	std	Z+1, r25	; 0x01
    2f98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9a:	de 01       	movw	r26, r28
    2f9c:	ab 58       	subi	r26, 0x8B	; 139
    2f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	eb 58       	subi	r30, 0x8B	; 139
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	11 96       	adiw	r26, 0x01	; 1
    2fae:	9c 93       	st	X, r25
    2fb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	eb 58       	subi	r30, 0x8B	; 139
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	d1 f6       	brne	.-76     	; 0x2f74 <main+0xc5a>
    2fc0:	27 c0       	rjmp	.+78     	; 0x3010 <main+0xcf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc2:	8e 01       	movw	r16, r28
    2fc4:	0b 58       	subi	r16, 0x8B	; 139
    2fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e9 58       	subi	r30, 0x89	; 137
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	60 81       	ld	r22, Z
    2fd0:	71 81       	ldd	r23, Z+1	; 0x01
    2fd2:	82 81       	ldd	r24, Z+2	; 0x02
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	f8 01       	movw	r30, r16
    2fe0:	91 83       	std	Z+1, r25	; 0x01
    2fe2:	80 83       	st	Z, r24
    2fe4:	de 01       	movw	r26, r28
    2fe6:	af 58       	subi	r26, 0x8F	; 143
    2fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fea:	fe 01       	movw	r30, r28
    2fec:	eb 58       	subi	r30, 0x8B	; 139
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	80 81       	ld	r24, Z
    2ff2:	91 81       	ldd	r25, Z+1	; 0x01
    2ff4:	8d 93       	st	X+, r24
    2ff6:	9c 93       	st	X, r25
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	ef 58       	subi	r30, 0x8F	; 143
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 81       	ld	r24, Z
    3000:	91 81       	ldd	r25, Z+1	; 0x01
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <main+0xce8>
    3006:	fe 01       	movw	r30, r28
    3008:	ef 58       	subi	r30, 0x8F	; 143
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
	    _delay_ms(500);
	    LCD8Bit_Send_Command(0x01);
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
        LCD_Send_String("Resistor:");
    3016:	8d ea       	ldi	r24, 0xAD	; 173
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
	    LCD_Send_Int(potentiometer_reading);
    301e:	80 91 49 02 	lds	r24, 0x0249
    3022:	90 91 4a 02 	lds	r25, 0x024A
    3026:	0e 94 48 10 	call	0x2090	; 0x2090 <LCD_Send_Int>
    302a:	fe 01       	movw	r30, r28
    302c:	e3 59       	subi	r30, 0x93	; 147
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	aa ef       	ldi	r26, 0xFA	; 250
    3036:	b3 e4       	ldi	r27, 0x43	; 67
    3038:	80 83       	st	Z, r24
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	a2 83       	std	Z+2, r26	; 0x02
    303e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3040:	8e 01       	movw	r16, r28
    3042:	07 59       	subi	r16, 0x97	; 151
    3044:	1f 4f       	sbci	r17, 0xFF	; 255
    3046:	fe 01       	movw	r30, r28
    3048:	e3 59       	subi	r30, 0x93	; 147
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	60 81       	ld	r22, Z
    304e:	71 81       	ldd	r23, Z+1	; 0x01
    3050:	82 81       	ldd	r24, Z+2	; 0x02
    3052:	93 81       	ldd	r25, Z+3	; 0x03
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	4a ef       	ldi	r20, 0xFA	; 250
    305a:	54 e4       	ldi	r21, 0x44	; 68
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	f8 01       	movw	r30, r16
    3066:	80 83       	st	Z, r24
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	a2 83       	std	Z+2, r26	; 0x02
    306c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    306e:	fe 01       	movw	r30, r28
    3070:	e7 59       	subi	r30, 0x97	; 151
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3088:	88 23       	and	r24, r24
    308a:	44 f4       	brge	.+16     	; 0x309c <main+0xd82>
		__ticks = 1;
    308c:	fe 01       	movw	r30, r28
    308e:	e9 59       	subi	r30, 0x99	; 153
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
    309a:	64 c0       	rjmp	.+200    	; 0x3164 <main+0xe4a>
	else if (__tmp > 65535)
    309c:	fe 01       	movw	r30, r28
    309e:	e7 59       	subi	r30, 0x97	; 151
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	60 81       	ld	r22, Z
    30a4:	71 81       	ldd	r23, Z+1	; 0x01
    30a6:	82 81       	ldd	r24, Z+2	; 0x02
    30a8:	93 81       	ldd	r25, Z+3	; 0x03
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	3f ef       	ldi	r19, 0xFF	; 255
    30ae:	4f e7       	ldi	r20, 0x7F	; 127
    30b0:	57 e4       	ldi	r21, 0x47	; 71
    30b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b6:	18 16       	cp	r1, r24
    30b8:	0c f0       	brlt	.+2      	; 0x30bc <main+0xda2>
    30ba:	43 c0       	rjmp	.+134    	; 0x3142 <main+0xe28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30bc:	fe 01       	movw	r30, r28
    30be:	e3 59       	subi	r30, 0x93	; 147
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	60 81       	ld	r22, Z
    30c4:	71 81       	ldd	r23, Z+1	; 0x01
    30c6:	82 81       	ldd	r24, Z+2	; 0x02
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	40 e2       	ldi	r20, 0x20	; 32
    30d0:	51 e4       	ldi	r21, 0x41	; 65
    30d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	8e 01       	movw	r16, r28
    30dc:	09 59       	subi	r16, 0x99	; 153
    30de:	1f 4f       	sbci	r17, 0xFF	; 255
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	f8 01       	movw	r30, r16
    30ee:	91 83       	std	Z+1, r25	; 0x01
    30f0:	80 83       	st	Z, r24
    30f2:	1f c0       	rjmp	.+62     	; 0x3132 <main+0xe18>
    30f4:	fe 01       	movw	r30, r28
    30f6:	eb 59       	subi	r30, 0x9B	; 155
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	88 ec       	ldi	r24, 0xC8	; 200
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	91 83       	std	Z+1, r25	; 0x01
    3100:	80 83       	st	Z, r24
    3102:	fe 01       	movw	r30, r28
    3104:	eb 59       	subi	r30, 0x9B	; 155
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	f1 f7       	brne	.-4      	; 0x310c <main+0xdf2>
    3110:	fe 01       	movw	r30, r28
    3112:	eb 59       	subi	r30, 0x9B	; 155
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311a:	de 01       	movw	r26, r28
    311c:	a9 59       	subi	r26, 0x99	; 153
    311e:	bf 4f       	sbci	r27, 0xFF	; 255
    3120:	fe 01       	movw	r30, r28
    3122:	e9 59       	subi	r30, 0x99	; 153
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	11 96       	adiw	r26, 0x01	; 1
    312e:	9c 93       	st	X, r25
    3130:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3132:	fe 01       	movw	r30, r28
    3134:	e9 59       	subi	r30, 0x99	; 153
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	80 81       	ld	r24, Z
    313a:	91 81       	ldd	r25, Z+1	; 0x01
    313c:	00 97       	sbiw	r24, 0x00	; 0
    313e:	d1 f6       	brne	.-76     	; 0x30f4 <main+0xdda>
    3140:	27 c0       	rjmp	.+78     	; 0x3190 <main+0xe76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3142:	8e 01       	movw	r16, r28
    3144:	09 59       	subi	r16, 0x99	; 153
    3146:	1f 4f       	sbci	r17, 0xFF	; 255
    3148:	fe 01       	movw	r30, r28
    314a:	e7 59       	subi	r30, 0x97	; 151
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	60 81       	ld	r22, Z
    3150:	71 81       	ldd	r23, Z+1	; 0x01
    3152:	82 81       	ldd	r24, Z+2	; 0x02
    3154:	93 81       	ldd	r25, Z+3	; 0x03
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	f8 01       	movw	r30, r16
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
    3164:	de 01       	movw	r26, r28
    3166:	ad 59       	subi	r26, 0x9D	; 157
    3168:	bf 4f       	sbci	r27, 0xFF	; 255
    316a:	fe 01       	movw	r30, r28
    316c:	e9 59       	subi	r30, 0x99	; 153
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	80 81       	ld	r24, Z
    3172:	91 81       	ldd	r25, Z+1	; 0x01
    3174:	8d 93       	st	X+, r24
    3176:	9c 93       	st	X, r25
    3178:	fe 01       	movw	r30, r28
    317a:	ed 59       	subi	r30, 0x9D	; 157
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	f1 f7       	brne	.-4      	; 0x3182 <main+0xe68>
    3186:	fe 01       	movw	r30, r28
    3188:	ed 59       	subi	r30, 0x9D	; 157
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	91 83       	std	Z+1, r25	; 0x01
    318e:	80 83       	st	Z, r24
	    _delay_ms(500);
	    LCD8Bit_Send_Command(0x01);
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
        LCD_Send_String("LDR:");
    3196:	87 eb       	ldi	r24, 0xB7	; 183
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
	    LCD_Send_Int(photoresistor_reading);
    319e:	80 91 4b 02 	lds	r24, 0x024B
    31a2:	90 91 4c 02 	lds	r25, 0x024C
    31a6:	0e 94 48 10 	call	0x2090	; 0x2090 <LCD_Send_Int>
    31aa:	fe 01       	movw	r30, r28
    31ac:	e1 5a       	subi	r30, 0xA1	; 161
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	aa ef       	ldi	r26, 0xFA	; 250
    31b6:	b3 e4       	ldi	r27, 0x43	; 67
    31b8:	80 83       	st	Z, r24
    31ba:	91 83       	std	Z+1, r25	; 0x01
    31bc:	a2 83       	std	Z+2, r26	; 0x02
    31be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c0:	8e 01       	movw	r16, r28
    31c2:	05 5a       	subi	r16, 0xA5	; 165
    31c4:	1f 4f       	sbci	r17, 0xFF	; 255
    31c6:	fe 01       	movw	r30, r28
    31c8:	e1 5a       	subi	r30, 0xA1	; 161
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	60 81       	ld	r22, Z
    31ce:	71 81       	ldd	r23, Z+1	; 0x01
    31d0:	82 81       	ldd	r24, Z+2	; 0x02
    31d2:	93 81       	ldd	r25, Z+3	; 0x03
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	4a ef       	ldi	r20, 0xFA	; 250
    31da:	54 e4       	ldi	r21, 0x44	; 68
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	f8 01       	movw	r30, r16
    31e6:	80 83       	st	Z, r24
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	a2 83       	std	Z+2, r26	; 0x02
    31ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31ee:	fe 01       	movw	r30, r28
    31f0:	e5 5a       	subi	r30, 0xA5	; 165
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	60 81       	ld	r22, Z
    31f6:	71 81       	ldd	r23, Z+1	; 0x01
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	5f e3       	ldi	r21, 0x3F	; 63
    3204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3208:	88 23       	and	r24, r24
    320a:	44 f4       	brge	.+16     	; 0x321c <main+0xf02>
		__ticks = 1;
    320c:	fe 01       	movw	r30, r28
    320e:	e7 5a       	subi	r30, 0xA7	; 167
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	91 83       	std	Z+1, r25	; 0x01
    3218:	80 83       	st	Z, r24
    321a:	64 c0       	rjmp	.+200    	; 0x32e4 <main+0xfca>
	else if (__tmp > 65535)
    321c:	fe 01       	movw	r30, r28
    321e:	e5 5a       	subi	r30, 0xA5	; 165
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	60 81       	ld	r22, Z
    3224:	71 81       	ldd	r23, Z+1	; 0x01
    3226:	82 81       	ldd	r24, Z+2	; 0x02
    3228:	93 81       	ldd	r25, Z+3	; 0x03
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	3f ef       	ldi	r19, 0xFF	; 255
    322e:	4f e7       	ldi	r20, 0x7F	; 127
    3230:	57 e4       	ldi	r21, 0x47	; 71
    3232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3236:	18 16       	cp	r1, r24
    3238:	0c f0       	brlt	.+2      	; 0x323c <main+0xf22>
    323a:	43 c0       	rjmp	.+134    	; 0x32c2 <main+0xfa8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323c:	fe 01       	movw	r30, r28
    323e:	e1 5a       	subi	r30, 0xA1	; 161
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e2       	ldi	r20, 0x20	; 32
    3250:	51 e4       	ldi	r21, 0x41	; 65
    3252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	8e 01       	movw	r16, r28
    325c:	07 5a       	subi	r16, 0xA7	; 167
    325e:	1f 4f       	sbci	r17, 0xFF	; 255
    3260:	bc 01       	movw	r22, r24
    3262:	cd 01       	movw	r24, r26
    3264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	f8 01       	movw	r30, r16
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	80 83       	st	Z, r24
    3272:	1f c0       	rjmp	.+62     	; 0x32b2 <main+0xf98>
    3274:	fe 01       	movw	r30, r28
    3276:	e9 5a       	subi	r30, 0xA9	; 169
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	88 ec       	ldi	r24, 0xC8	; 200
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	91 83       	std	Z+1, r25	; 0x01
    3280:	80 83       	st	Z, r24
    3282:	fe 01       	movw	r30, r28
    3284:	e9 5a       	subi	r30, 0xA9	; 169
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	80 81       	ld	r24, Z
    328a:	91 81       	ldd	r25, Z+1	; 0x01
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <main+0xf72>
    3290:	fe 01       	movw	r30, r28
    3292:	e9 5a       	subi	r30, 0xA9	; 169
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	91 83       	std	Z+1, r25	; 0x01
    3298:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	de 01       	movw	r26, r28
    329c:	a7 5a       	subi	r26, 0xA7	; 167
    329e:	bf 4f       	sbci	r27, 0xFF	; 255
    32a0:	fe 01       	movw	r30, r28
    32a2:	e7 5a       	subi	r30, 0xA7	; 167
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 81       	ld	r24, Z
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	11 96       	adiw	r26, 0x01	; 1
    32ae:	9c 93       	st	X, r25
    32b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b2:	fe 01       	movw	r30, r28
    32b4:	e7 5a       	subi	r30, 0xA7	; 167
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	d1 f6       	brne	.-76     	; 0x3274 <main+0xf5a>
    32c0:	27 c0       	rjmp	.+78     	; 0x3310 <main+0xff6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c2:	8e 01       	movw	r16, r28
    32c4:	07 5a       	subi	r16, 0xA7	; 167
    32c6:	1f 4f       	sbci	r17, 0xFF	; 255
    32c8:	fe 01       	movw	r30, r28
    32ca:	e5 5a       	subi	r30, 0xA5	; 165
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	60 81       	ld	r22, Z
    32d0:	71 81       	ldd	r23, Z+1	; 0x01
    32d2:	82 81       	ldd	r24, Z+2	; 0x02
    32d4:	93 81       	ldd	r25, Z+3	; 0x03
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	f8 01       	movw	r30, r16
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	80 83       	st	Z, r24
    32e4:	de 01       	movw	r26, r28
    32e6:	ab 5a       	subi	r26, 0xAB	; 171
    32e8:	bf 4f       	sbci	r27, 0xFF	; 255
    32ea:	fe 01       	movw	r30, r28
    32ec:	e7 5a       	subi	r30, 0xA7	; 167
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 81       	ld	r24, Z
    32f2:	91 81       	ldd	r25, Z+1	; 0x01
    32f4:	8d 93       	st	X+, r24
    32f6:	9c 93       	st	X, r25
    32f8:	fe 01       	movw	r30, r28
    32fa:	eb 5a       	subi	r30, 0xAB	; 171
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	80 81       	ld	r24, Z
    3300:	91 81       	ldd	r25, Z+1	; 0x01
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <main+0xfe8>
    3306:	fe 01       	movw	r30, r28
    3308:	eb 5a       	subi	r30, 0xAB	; 171
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	91 83       	std	Z+1, r25	; 0x01
    330e:	80 83       	st	Z, r24
	    _delay_ms(500);
	    LCD8Bit_Send_Command(0x01);
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>
        LCD_Send_String("Infrared:");
    3316:	8c eb       	ldi	r24, 0xBC	; 188
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_Send_String>
	    LCD_Send_Int(infrared_reading);
    331e:	80 91 4d 02 	lds	r24, 0x024D
    3322:	90 91 4e 02 	lds	r25, 0x024E
    3326:	0e 94 48 10 	call	0x2090	; 0x2090 <LCD_Send_Int>
    332a:	fe 01       	movw	r30, r28
    332c:	ef 5a       	subi	r30, 0xAF	; 175
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	aa ef       	ldi	r26, 0xFA	; 250
    3336:	b3 e4       	ldi	r27, 0x43	; 67
    3338:	80 83       	st	Z, r24
    333a:	91 83       	std	Z+1, r25	; 0x01
    333c:	a2 83       	std	Z+2, r26	; 0x02
    333e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	8e 01       	movw	r16, r28
    3342:	03 5b       	subi	r16, 0xB3	; 179
    3344:	1f 4f       	sbci	r17, 0xFF	; 255
    3346:	fe 01       	movw	r30, r28
    3348:	ef 5a       	subi	r30, 0xAF	; 175
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	60 81       	ld	r22, Z
    334e:	71 81       	ldd	r23, Z+1	; 0x01
    3350:	82 81       	ldd	r24, Z+2	; 0x02
    3352:	93 81       	ldd	r25, Z+3	; 0x03
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4a ef       	ldi	r20, 0xFA	; 250
    335a:	54 e4       	ldi	r21, 0x44	; 68
    335c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	f8 01       	movw	r30, r16
    3366:	80 83       	st	Z, r24
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	a2 83       	std	Z+2, r26	; 0x02
    336c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    336e:	fe 01       	movw	r30, r28
    3370:	e3 5b       	subi	r30, 0xB3	; 179
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	60 81       	ld	r22, Z
    3376:	71 81       	ldd	r23, Z+1	; 0x01
    3378:	82 81       	ldd	r24, Z+2	; 0x02
    337a:	93 81       	ldd	r25, Z+3	; 0x03
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	40 e8       	ldi	r20, 0x80	; 128
    3382:	5f e3       	ldi	r21, 0x3F	; 63
    3384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3388:	88 23       	and	r24, r24
    338a:	44 f4       	brge	.+16     	; 0x339c <main+0x1082>
		__ticks = 1;
    338c:	fe 01       	movw	r30, r28
    338e:	e5 5b       	subi	r30, 0xB5	; 181
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	91 83       	std	Z+1, r25	; 0x01
    3398:	80 83       	st	Z, r24
    339a:	64 c0       	rjmp	.+200    	; 0x3464 <main+0x114a>
	else if (__tmp > 65535)
    339c:	fe 01       	movw	r30, r28
    339e:	e3 5b       	subi	r30, 0xB3	; 179
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	3f ef       	ldi	r19, 0xFF	; 255
    33ae:	4f e7       	ldi	r20, 0x7F	; 127
    33b0:	57 e4       	ldi	r21, 0x47	; 71
    33b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33b6:	18 16       	cp	r1, r24
    33b8:	0c f0       	brlt	.+2      	; 0x33bc <main+0x10a2>
    33ba:	43 c0       	rjmp	.+134    	; 0x3442 <main+0x1128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33bc:	fe 01       	movw	r30, r28
    33be:	ef 5a       	subi	r30, 0xAF	; 175
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	60 81       	ld	r22, Z
    33c4:	71 81       	ldd	r23, Z+1	; 0x01
    33c6:	82 81       	ldd	r24, Z+2	; 0x02
    33c8:	93 81       	ldd	r25, Z+3	; 0x03
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	40 e2       	ldi	r20, 0x20	; 32
    33d0:	51 e4       	ldi	r21, 0x41	; 65
    33d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	8e 01       	movw	r16, r28
    33dc:	05 5b       	subi	r16, 0xB5	; 181
    33de:	1f 4f       	sbci	r17, 0xFF	; 255
    33e0:	bc 01       	movw	r22, r24
    33e2:	cd 01       	movw	r24, r26
    33e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	f8 01       	movw	r30, r16
    33ee:	91 83       	std	Z+1, r25	; 0x01
    33f0:	80 83       	st	Z, r24
    33f2:	1f c0       	rjmp	.+62     	; 0x3432 <main+0x1118>
    33f4:	fe 01       	movw	r30, r28
    33f6:	e7 5b       	subi	r30, 0xB7	; 183
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	88 ec       	ldi	r24, 0xC8	; 200
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	80 83       	st	Z, r24
    3402:	fe 01       	movw	r30, r28
    3404:	e7 5b       	subi	r30, 0xB7	; 183
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <main+0x10f2>
    3410:	fe 01       	movw	r30, r28
    3412:	e7 5b       	subi	r30, 0xB7	; 183
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	91 83       	std	Z+1, r25	; 0x01
    3418:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341a:	de 01       	movw	r26, r28
    341c:	a5 5b       	subi	r26, 0xB5	; 181
    341e:	bf 4f       	sbci	r27, 0xFF	; 255
    3420:	fe 01       	movw	r30, r28
    3422:	e5 5b       	subi	r30, 0xB5	; 181
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	80 81       	ld	r24, Z
    3428:	91 81       	ldd	r25, Z+1	; 0x01
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	11 96       	adiw	r26, 0x01	; 1
    342e:	9c 93       	st	X, r25
    3430:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3432:	fe 01       	movw	r30, r28
    3434:	e5 5b       	subi	r30, 0xB5	; 181
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	80 81       	ld	r24, Z
    343a:	91 81       	ldd	r25, Z+1	; 0x01
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	d1 f6       	brne	.-76     	; 0x33f4 <main+0x10da>
    3440:	27 c0       	rjmp	.+78     	; 0x3490 <main+0x1176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	8e 01       	movw	r16, r28
    3444:	05 5b       	subi	r16, 0xB5	; 181
    3446:	1f 4f       	sbci	r17, 0xFF	; 255
    3448:	fe 01       	movw	r30, r28
    344a:	e3 5b       	subi	r30, 0xB3	; 179
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	60 81       	ld	r22, Z
    3450:	71 81       	ldd	r23, Z+1	; 0x01
    3452:	82 81       	ldd	r24, Z+2	; 0x02
    3454:	93 81       	ldd	r25, Z+3	; 0x03
    3456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	f8 01       	movw	r30, r16
    3460:	91 83       	std	Z+1, r25	; 0x01
    3462:	80 83       	st	Z, r24
    3464:	de 01       	movw	r26, r28
    3466:	a9 5b       	subi	r26, 0xB9	; 185
    3468:	bf 4f       	sbci	r27, 0xFF	; 255
    346a:	fe 01       	movw	r30, r28
    346c:	e5 5b       	subi	r30, 0xB5	; 181
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	80 81       	ld	r24, Z
    3472:	91 81       	ldd	r25, Z+1	; 0x01
    3474:	8d 93       	st	X+, r24
    3476:	9c 93       	st	X, r25
    3478:	fe 01       	movw	r30, r28
    347a:	e9 5b       	subi	r30, 0xB9	; 185
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	80 81       	ld	r24, Z
    3480:	91 81       	ldd	r25, Z+1	; 0x01
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <main+0x1168>
    3486:	fe 01       	movw	r30, r28
    3488:	e9 5b       	subi	r30, 0xB9	; 185
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	91 83       	std	Z+1, r25	; 0x01
    348e:	80 83       	st	Z, r24
	    _delay_ms(500);
	    LCD8Bit_Send_Command(0x01);
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <LCD8Bit_Send_Command>

	    for(u8 i = 0; i<100;i++){
    3496:	fe 01       	movw	r30, r28
    3498:	ed 52       	subi	r30, 0x2D	; 45
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	10 82       	st	Z, r1
    349e:	a1 c2       	rjmp	.+1346   	; 0x39e2 <main+0x16c8>
	    Shift(shiftregPORT,latch,data,clk,(unsigned int)0b0110000001111111);
    34a0:	80 91 41 02 	lds	r24, 0x0241
    34a4:	90 91 42 02 	lds	r25, 0x0242
    34a8:	20 91 43 02 	lds	r18, 0x0243
    34ac:	30 91 46 02 	lds	r19, 0x0246
    34b0:	69 2f       	mov	r22, r25
    34b2:	42 2f       	mov	r20, r18
    34b4:	23 2f       	mov	r18, r19
    34b6:	0f e7       	ldi	r16, 0x7F	; 127
    34b8:	10 e6       	ldi	r17, 0x60	; 96
    34ba:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <Shift>
    34be:	fe 01       	movw	r30, r28
    34c0:	ed 5b       	subi	r30, 0xBD	; 189
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	a0 e8       	ldi	r26, 0x80	; 128
    34ca:	bf e3       	ldi	r27, 0x3F	; 63
    34cc:	80 83       	st	Z, r24
    34ce:	91 83       	std	Z+1, r25	; 0x01
    34d0:	a2 83       	std	Z+2, r26	; 0x02
    34d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d4:	8e 01       	movw	r16, r28
    34d6:	01 5c       	subi	r16, 0xC1	; 193
    34d8:	1f 4f       	sbci	r17, 0xFF	; 255
    34da:	fe 01       	movw	r30, r28
    34dc:	ed 5b       	subi	r30, 0xBD	; 189
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	60 81       	ld	r22, Z
    34e2:	71 81       	ldd	r23, Z+1	; 0x01
    34e4:	82 81       	ldd	r24, Z+2	; 0x02
    34e6:	93 81       	ldd	r25, Z+3	; 0x03
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	4a ef       	ldi	r20, 0xFA	; 250
    34ee:	54 e4       	ldi	r21, 0x44	; 68
    34f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	f8 01       	movw	r30, r16
    34fa:	80 83       	st	Z, r24
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	a2 83       	std	Z+2, r26	; 0x02
    3500:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3502:	fe 01       	movw	r30, r28
    3504:	ff 96       	adiw	r30, 0x3f	; 63
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	82 81       	ldd	r24, Z+2	; 0x02
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e8       	ldi	r20, 0x80	; 128
    3514:	5f e3       	ldi	r21, 0x3F	; 63
    3516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    351a:	88 23       	and	r24, r24
    351c:	2c f4       	brge	.+10     	; 0x3528 <main+0x120e>
		__ticks = 1;
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	9e af       	std	Y+62, r25	; 0x3e
    3524:	8d af       	std	Y+61, r24	; 0x3d
    3526:	46 c0       	rjmp	.+140    	; 0x35b4 <main+0x129a>
	else if (__tmp > 65535)
    3528:	fe 01       	movw	r30, r28
    352a:	ff 96       	adiw	r30, 0x3f	; 63
    352c:	60 81       	ld	r22, Z
    352e:	71 81       	ldd	r23, Z+1	; 0x01
    3530:	82 81       	ldd	r24, Z+2	; 0x02
    3532:	93 81       	ldd	r25, Z+3	; 0x03
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	3f ef       	ldi	r19, 0xFF	; 255
    3538:	4f e7       	ldi	r20, 0x7F	; 127
    353a:	57 e4       	ldi	r21, 0x47	; 71
    353c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3540:	18 16       	cp	r1, r24
    3542:	64 f5       	brge	.+88     	; 0x359c <main+0x1282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3544:	fe 01       	movw	r30, r28
    3546:	ed 5b       	subi	r30, 0xBD	; 189
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e2       	ldi	r20, 0x20	; 32
    3558:	51 e4       	ldi	r21, 0x41	; 65
    355a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	bc 01       	movw	r22, r24
    3564:	cd 01       	movw	r24, r26
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	9e af       	std	Y+62, r25	; 0x3e
    3570:	8d af       	std	Y+61, r24	; 0x3d
    3572:	0f c0       	rjmp	.+30     	; 0x3592 <main+0x1278>
    3574:	88 ec       	ldi	r24, 0xC8	; 200
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	9c af       	std	Y+60, r25	; 0x3c
    357a:	8b af       	std	Y+59, r24	; 0x3b
    357c:	8b ad       	ldd	r24, Y+59	; 0x3b
    357e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <main+0x1266>
    3584:	9c af       	std	Y+60, r25	; 0x3c
    3586:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3588:	8d ad       	ldd	r24, Y+61	; 0x3d
    358a:	9e ad       	ldd	r25, Y+62	; 0x3e
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	9e af       	std	Y+62, r25	; 0x3e
    3590:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3592:	8d ad       	ldd	r24, Y+61	; 0x3d
    3594:	9e ad       	ldd	r25, Y+62	; 0x3e
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	69 f7       	brne	.-38     	; 0x3574 <main+0x125a>
    359a:	16 c0       	rjmp	.+44     	; 0x35c8 <main+0x12ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359c:	fe 01       	movw	r30, r28
    359e:	ff 96       	adiw	r30, 0x3f	; 63
    35a0:	60 81       	ld	r22, Z
    35a2:	71 81       	ldd	r23, Z+1	; 0x01
    35a4:	82 81       	ldd	r24, Z+2	; 0x02
    35a6:	93 81       	ldd	r25, Z+3	; 0x03
    35a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	9e af       	std	Y+62, r25	; 0x3e
    35b2:	8d af       	std	Y+61, r24	; 0x3d
    35b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    35b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    35b8:	9a af       	std	Y+58, r25	; 0x3a
    35ba:	89 af       	std	Y+57, r24	; 0x39
    35bc:	89 ad       	ldd	r24, Y+57	; 0x39
    35be:	9a ad       	ldd	r25, Y+58	; 0x3a
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <main+0x12a6>
    35c4:	9a af       	std	Y+58, r25	; 0x3a
    35c6:	89 af       	std	Y+57, r24	; 0x39
	    _delay_ms(1);
	    Shift(shiftregPORT,latch,data,clk,(unsigned int)0b1101101110111111);
    35c8:	80 91 41 02 	lds	r24, 0x0241
    35cc:	90 91 42 02 	lds	r25, 0x0242
    35d0:	20 91 43 02 	lds	r18, 0x0243
    35d4:	30 91 46 02 	lds	r19, 0x0246
    35d8:	69 2f       	mov	r22, r25
    35da:	42 2f       	mov	r20, r18
    35dc:	23 2f       	mov	r18, r19
    35de:	0f eb       	ldi	r16, 0xBF	; 191
    35e0:	1b ed       	ldi	r17, 0xDB	; 219
    35e2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <Shift>
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	a0 e8       	ldi	r26, 0x80	; 128
    35ec:	bf e3       	ldi	r27, 0x3F	; 63
    35ee:	8d ab       	std	Y+53, r24	; 0x35
    35f0:	9e ab       	std	Y+54, r25	; 0x36
    35f2:	af ab       	std	Y+55, r26	; 0x37
    35f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f6:	6d a9       	ldd	r22, Y+53	; 0x35
    35f8:	7e a9       	ldd	r23, Y+54	; 0x36
    35fa:	8f a9       	ldd	r24, Y+55	; 0x37
    35fc:	98 ad       	ldd	r25, Y+56	; 0x38
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	4a ef       	ldi	r20, 0xFA	; 250
    3604:	54 e4       	ldi	r21, 0x44	; 68
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	89 ab       	std	Y+49, r24	; 0x31
    3610:	9a ab       	std	Y+50, r25	; 0x32
    3612:	ab ab       	std	Y+51, r26	; 0x33
    3614:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3616:	69 a9       	ldd	r22, Y+49	; 0x31
    3618:	7a a9       	ldd	r23, Y+50	; 0x32
    361a:	8b a9       	ldd	r24, Y+51	; 0x33
    361c:	9c a9       	ldd	r25, Y+52	; 0x34
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e8       	ldi	r20, 0x80	; 128
    3624:	5f e3       	ldi	r21, 0x3F	; 63
    3626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    362a:	88 23       	and	r24, r24
    362c:	2c f4       	brge	.+10     	; 0x3638 <main+0x131e>
		__ticks = 1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	98 ab       	std	Y+48, r25	; 0x30
    3634:	8f a7       	std	Y+47, r24	; 0x2f
    3636:	3f c0       	rjmp	.+126    	; 0x36b6 <main+0x139c>
	else if (__tmp > 65535)
    3638:	69 a9       	ldd	r22, Y+49	; 0x31
    363a:	7a a9       	ldd	r23, Y+50	; 0x32
    363c:	8b a9       	ldd	r24, Y+51	; 0x33
    363e:	9c a9       	ldd	r25, Y+52	; 0x34
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    3644:	4f e7       	ldi	r20, 0x7F	; 127
    3646:	57 e4       	ldi	r21, 0x47	; 71
    3648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364c:	18 16       	cp	r1, r24
    364e:	4c f5       	brge	.+82     	; 0x36a2 <main+0x1388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3650:	6d a9       	ldd	r22, Y+53	; 0x35
    3652:	7e a9       	ldd	r23, Y+54	; 0x36
    3654:	8f a9       	ldd	r24, Y+55	; 0x37
    3656:	98 ad       	ldd	r25, Y+56	; 0x38
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e2       	ldi	r20, 0x20	; 32
    365e:	51 e4       	ldi	r21, 0x41	; 65
    3660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	98 ab       	std	Y+48, r25	; 0x30
    3676:	8f a7       	std	Y+47, r24	; 0x2f
    3678:	0f c0       	rjmp	.+30     	; 0x3698 <main+0x137e>
    367a:	88 ec       	ldi	r24, 0xC8	; 200
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	9e a7       	std	Y+46, r25	; 0x2e
    3680:	8d a7       	std	Y+45, r24	; 0x2d
    3682:	8d a5       	ldd	r24, Y+45	; 0x2d
    3684:	9e a5       	ldd	r25, Y+46	; 0x2e
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <main+0x136c>
    368a:	9e a7       	std	Y+46, r25	; 0x2e
    368c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3690:	98 a9       	ldd	r25, Y+48	; 0x30
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	98 ab       	std	Y+48, r25	; 0x30
    3696:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3698:	8f a5       	ldd	r24, Y+47	; 0x2f
    369a:	98 a9       	ldd	r25, Y+48	; 0x30
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	69 f7       	brne	.-38     	; 0x367a <main+0x1360>
    36a0:	14 c0       	rjmp	.+40     	; 0x36ca <main+0x13b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a2:	69 a9       	ldd	r22, Y+49	; 0x31
    36a4:	7a a9       	ldd	r23, Y+50	; 0x32
    36a6:	8b a9       	ldd	r24, Y+51	; 0x33
    36a8:	9c a9       	ldd	r25, Y+52	; 0x34
    36aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	98 ab       	std	Y+48, r25	; 0x30
    36b4:	8f a7       	std	Y+47, r24	; 0x2f
    36b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    36b8:	98 a9       	ldd	r25, Y+48	; 0x30
    36ba:	9c a7       	std	Y+44, r25	; 0x2c
    36bc:	8b a7       	std	Y+43, r24	; 0x2b
    36be:	8b a5       	ldd	r24, Y+43	; 0x2b
    36c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <main+0x13a8>
    36c6:	9c a7       	std	Y+44, r25	; 0x2c
    36c8:	8b a7       	std	Y+43, r24	; 0x2b
	    _delay_ms(1);
	    Shift(shiftregPORT,latch,data,clk,(unsigned int)0b1111111011011111);
    36ca:	80 91 41 02 	lds	r24, 0x0241
    36ce:	90 91 42 02 	lds	r25, 0x0242
    36d2:	20 91 43 02 	lds	r18, 0x0243
    36d6:	30 91 46 02 	lds	r19, 0x0246
    36da:	69 2f       	mov	r22, r25
    36dc:	42 2f       	mov	r20, r18
    36de:	23 2f       	mov	r18, r19
    36e0:	0f ed       	ldi	r16, 0xDF	; 223
    36e2:	1e ef       	ldi	r17, 0xFE	; 254
    36e4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <Shift>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	a0 e8       	ldi	r26, 0x80	; 128
    36ee:	bf e3       	ldi	r27, 0x3F	; 63
    36f0:	8f a3       	std	Y+39, r24	; 0x27
    36f2:	98 a7       	std	Y+40, r25	; 0x28
    36f4:	a9 a7       	std	Y+41, r26	; 0x29
    36f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f8:	6f a1       	ldd	r22, Y+39	; 0x27
    36fa:	78 a5       	ldd	r23, Y+40	; 0x28
    36fc:	89 a5       	ldd	r24, Y+41	; 0x29
    36fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	4a ef       	ldi	r20, 0xFA	; 250
    3706:	54 e4       	ldi	r21, 0x44	; 68
    3708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	8b a3       	std	Y+35, r24	; 0x23
    3712:	9c a3       	std	Y+36, r25	; 0x24
    3714:	ad a3       	std	Y+37, r26	; 0x25
    3716:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3718:	6b a1       	ldd	r22, Y+35	; 0x23
    371a:	7c a1       	ldd	r23, Y+36	; 0x24
    371c:	8d a1       	ldd	r24, Y+37	; 0x25
    371e:	9e a1       	ldd	r25, Y+38	; 0x26
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	40 e8       	ldi	r20, 0x80	; 128
    3726:	5f e3       	ldi	r21, 0x3F	; 63
    3728:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    372c:	88 23       	and	r24, r24
    372e:	2c f4       	brge	.+10     	; 0x373a <main+0x1420>
		__ticks = 1;
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9a a3       	std	Y+34, r25	; 0x22
    3736:	89 a3       	std	Y+33, r24	; 0x21
    3738:	3f c0       	rjmp	.+126    	; 0x37b8 <main+0x149e>
	else if (__tmp > 65535)
    373a:	6b a1       	ldd	r22, Y+35	; 0x23
    373c:	7c a1       	ldd	r23, Y+36	; 0x24
    373e:	8d a1       	ldd	r24, Y+37	; 0x25
    3740:	9e a1       	ldd	r25, Y+38	; 0x26
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	3f ef       	ldi	r19, 0xFF	; 255
    3746:	4f e7       	ldi	r20, 0x7F	; 127
    3748:	57 e4       	ldi	r21, 0x47	; 71
    374a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374e:	18 16       	cp	r1, r24
    3750:	4c f5       	brge	.+82     	; 0x37a4 <main+0x148a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3752:	6f a1       	ldd	r22, Y+39	; 0x27
    3754:	78 a5       	ldd	r23, Y+40	; 0x28
    3756:	89 a5       	ldd	r24, Y+41	; 0x29
    3758:	9a a5       	ldd	r25, Y+42	; 0x2a
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e2       	ldi	r20, 0x20	; 32
    3760:	51 e4       	ldi	r21, 0x41	; 65
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	bc 01       	movw	r22, r24
    376c:	cd 01       	movw	r24, r26
    376e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	9a a3       	std	Y+34, r25	; 0x22
    3778:	89 a3       	std	Y+33, r24	; 0x21
    377a:	0f c0       	rjmp	.+30     	; 0x379a <main+0x1480>
    377c:	88 ec       	ldi	r24, 0xC8	; 200
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	98 a3       	std	Y+32, r25	; 0x20
    3782:	8f 8f       	std	Y+31, r24	; 0x1f
    3784:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3786:	98 a1       	ldd	r25, Y+32	; 0x20
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	f1 f7       	brne	.-4      	; 0x3788 <main+0x146e>
    378c:	98 a3       	std	Y+32, r25	; 0x20
    378e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3790:	89 a1       	ldd	r24, Y+33	; 0x21
    3792:	9a a1       	ldd	r25, Y+34	; 0x22
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	9a a3       	std	Y+34, r25	; 0x22
    3798:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379a:	89 a1       	ldd	r24, Y+33	; 0x21
    379c:	9a a1       	ldd	r25, Y+34	; 0x22
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	69 f7       	brne	.-38     	; 0x377c <main+0x1462>
    37a2:	14 c0       	rjmp	.+40     	; 0x37cc <main+0x14b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a4:	6b a1       	ldd	r22, Y+35	; 0x23
    37a6:	7c a1       	ldd	r23, Y+36	; 0x24
    37a8:	8d a1       	ldd	r24, Y+37	; 0x25
    37aa:	9e a1       	ldd	r25, Y+38	; 0x26
    37ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	9a a3       	std	Y+34, r25	; 0x22
    37b6:	89 a3       	std	Y+33, r24	; 0x21
    37b8:	89 a1       	ldd	r24, Y+33	; 0x21
    37ba:	9a a1       	ldd	r25, Y+34	; 0x22
    37bc:	9e 8f       	std	Y+30, r25	; 0x1e
    37be:	8d 8f       	std	Y+29, r24	; 0x1d
    37c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <main+0x14aa>
    37c8:	9e 8f       	std	Y+30, r25	; 0x1e
    37ca:	8d 8f       	std	Y+29, r24	; 0x1d
	    _delay_ms(1);
	    Shift(shiftregPORT,latch,data,clk,(unsigned int)0b1111111011101111);
    37cc:	80 91 41 02 	lds	r24, 0x0241
    37d0:	90 91 42 02 	lds	r25, 0x0242
    37d4:	20 91 43 02 	lds	r18, 0x0243
    37d8:	30 91 46 02 	lds	r19, 0x0246
    37dc:	69 2f       	mov	r22, r25
    37de:	42 2f       	mov	r20, r18
    37e0:	23 2f       	mov	r18, r19
    37e2:	0f ee       	ldi	r16, 0xEF	; 239
    37e4:	1e ef       	ldi	r17, 0xFE	; 254
    37e6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <Shift>
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	a0 e8       	ldi	r26, 0x80	; 128
    37f0:	bf e3       	ldi	r27, 0x3F	; 63
    37f2:	89 8f       	std	Y+25, r24	; 0x19
    37f4:	9a 8f       	std	Y+26, r25	; 0x1a
    37f6:	ab 8f       	std	Y+27, r26	; 0x1b
    37f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37fa:	69 8d       	ldd	r22, Y+25	; 0x19
    37fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3800:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	4a ef       	ldi	r20, 0xFA	; 250
    3808:	54 e4       	ldi	r21, 0x44	; 68
    380a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	8d 8b       	std	Y+21, r24	; 0x15
    3814:	9e 8b       	std	Y+22, r25	; 0x16
    3816:	af 8b       	std	Y+23, r26	; 0x17
    3818:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    381a:	6d 89       	ldd	r22, Y+21	; 0x15
    381c:	7e 89       	ldd	r23, Y+22	; 0x16
    381e:	8f 89       	ldd	r24, Y+23	; 0x17
    3820:	98 8d       	ldd	r25, Y+24	; 0x18
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e8       	ldi	r20, 0x80	; 128
    3828:	5f e3       	ldi	r21, 0x3F	; 63
    382a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    382e:	88 23       	and	r24, r24
    3830:	2c f4       	brge	.+10     	; 0x383c <main+0x1522>
		__ticks = 1;
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	9c 8b       	std	Y+20, r25	; 0x14
    3838:	8b 8b       	std	Y+19, r24	; 0x13
    383a:	3f c0       	rjmp	.+126    	; 0x38ba <main+0x15a0>
	else if (__tmp > 65535)
    383c:	6d 89       	ldd	r22, Y+21	; 0x15
    383e:	7e 89       	ldd	r23, Y+22	; 0x16
    3840:	8f 89       	ldd	r24, Y+23	; 0x17
    3842:	98 8d       	ldd	r25, Y+24	; 0x18
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	3f ef       	ldi	r19, 0xFF	; 255
    3848:	4f e7       	ldi	r20, 0x7F	; 127
    384a:	57 e4       	ldi	r21, 0x47	; 71
    384c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3850:	18 16       	cp	r1, r24
    3852:	4c f5       	brge	.+82     	; 0x38a6 <main+0x158c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3854:	69 8d       	ldd	r22, Y+25	; 0x19
    3856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    385a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	40 e2       	ldi	r20, 0x20	; 32
    3862:	51 e4       	ldi	r21, 0x41	; 65
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	bc 01       	movw	r22, r24
    386e:	cd 01       	movw	r24, r26
    3870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	9c 8b       	std	Y+20, r25	; 0x14
    387a:	8b 8b       	std	Y+19, r24	; 0x13
    387c:	0f c0       	rjmp	.+30     	; 0x389c <main+0x1582>
    387e:	88 ec       	ldi	r24, 0xC8	; 200
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9a 8b       	std	Y+18, r25	; 0x12
    3884:	89 8b       	std	Y+17, r24	; 0x11
    3886:	89 89       	ldd	r24, Y+17	; 0x11
    3888:	9a 89       	ldd	r25, Y+18	; 0x12
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	f1 f7       	brne	.-4      	; 0x388a <main+0x1570>
    388e:	9a 8b       	std	Y+18, r25	; 0x12
    3890:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3892:	8b 89       	ldd	r24, Y+19	; 0x13
    3894:	9c 89       	ldd	r25, Y+20	; 0x14
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	9c 8b       	std	Y+20, r25	; 0x14
    389a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    389c:	8b 89       	ldd	r24, Y+19	; 0x13
    389e:	9c 89       	ldd	r25, Y+20	; 0x14
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	69 f7       	brne	.-38     	; 0x387e <main+0x1564>
    38a4:	14 c0       	rjmp	.+40     	; 0x38ce <main+0x15b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a6:	6d 89       	ldd	r22, Y+21	; 0x15
    38a8:	7e 89       	ldd	r23, Y+22	; 0x16
    38aa:	8f 89       	ldd	r24, Y+23	; 0x17
    38ac:	98 8d       	ldd	r25, Y+24	; 0x18
    38ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	9c 8b       	std	Y+20, r25	; 0x14
    38b8:	8b 8b       	std	Y+19, r24	; 0x13
    38ba:	8b 89       	ldd	r24, Y+19	; 0x13
    38bc:	9c 89       	ldd	r25, Y+20	; 0x14
    38be:	98 8b       	std	Y+16, r25	; 0x10
    38c0:	8f 87       	std	Y+15, r24	; 0x0f
    38c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c4:	98 89       	ldd	r25, Y+16	; 0x10
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	f1 f7       	brne	.-4      	; 0x38c6 <main+0x15ac>
    38ca:	98 8b       	std	Y+16, r25	; 0x10
    38cc:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(1);
	    Shift(shiftregPORT,latch,data,clk,(unsigned int)0b1111111011111111);
    38ce:	80 91 41 02 	lds	r24, 0x0241
    38d2:	90 91 42 02 	lds	r25, 0x0242
    38d6:	20 91 43 02 	lds	r18, 0x0243
    38da:	30 91 46 02 	lds	r19, 0x0246
    38de:	69 2f       	mov	r22, r25
    38e0:	42 2f       	mov	r20, r18
    38e2:	23 2f       	mov	r18, r19
    38e4:	0f ef       	ldi	r16, 0xFF	; 255
    38e6:	1e ef       	ldi	r17, 0xFE	; 254
    38e8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <Shift>
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	a0 e8       	ldi	r26, 0x80	; 128
    38f2:	bf e3       	ldi	r27, 0x3F	; 63
    38f4:	8b 87       	std	Y+11, r24	; 0x0b
    38f6:	9c 87       	std	Y+12, r25	; 0x0c
    38f8:	ad 87       	std	Y+13, r26	; 0x0d
    38fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    38fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3900:	8d 85       	ldd	r24, Y+13	; 0x0d
    3902:	9e 85       	ldd	r25, Y+14	; 0x0e
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	4a ef       	ldi	r20, 0xFA	; 250
    390a:	54 e4       	ldi	r21, 0x44	; 68
    390c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	8f 83       	std	Y+7, r24	; 0x07
    3916:	98 87       	std	Y+8, r25	; 0x08
    3918:	a9 87       	std	Y+9, r26	; 0x09
    391a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    391c:	6f 81       	ldd	r22, Y+7	; 0x07
    391e:	78 85       	ldd	r23, Y+8	; 0x08
    3920:	89 85       	ldd	r24, Y+9	; 0x09
    3922:	9a 85       	ldd	r25, Y+10	; 0x0a
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e8       	ldi	r20, 0x80	; 128
    392a:	5f e3       	ldi	r21, 0x3F	; 63
    392c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3930:	88 23       	and	r24, r24
    3932:	2c f4       	brge	.+10     	; 0x393e <main+0x1624>
		__ticks = 1;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9e 83       	std	Y+6, r25	; 0x06
    393a:	8d 83       	std	Y+5, r24	; 0x05
    393c:	3f c0       	rjmp	.+126    	; 0x39bc <main+0x16a2>
	else if (__tmp > 65535)
    393e:	6f 81       	ldd	r22, Y+7	; 0x07
    3940:	78 85       	ldd	r23, Y+8	; 0x08
    3942:	89 85       	ldd	r24, Y+9	; 0x09
    3944:	9a 85       	ldd	r25, Y+10	; 0x0a
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	3f ef       	ldi	r19, 0xFF	; 255
    394a:	4f e7       	ldi	r20, 0x7F	; 127
    394c:	57 e4       	ldi	r21, 0x47	; 71
    394e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3952:	18 16       	cp	r1, r24
    3954:	4c f5       	brge	.+82     	; 0x39a8 <main+0x168e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3956:	6b 85       	ldd	r22, Y+11	; 0x0b
    3958:	7c 85       	ldd	r23, Y+12	; 0x0c
    395a:	8d 85       	ldd	r24, Y+13	; 0x0d
    395c:	9e 85       	ldd	r25, Y+14	; 0x0e
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e2       	ldi	r20, 0x20	; 32
    3964:	51 e4       	ldi	r21, 0x41	; 65
    3966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	bc 01       	movw	r22, r24
    3970:	cd 01       	movw	r24, r26
    3972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	9e 83       	std	Y+6, r25	; 0x06
    397c:	8d 83       	std	Y+5, r24	; 0x05
    397e:	0f c0       	rjmp	.+30     	; 0x399e <main+0x1684>
    3980:	88 ec       	ldi	r24, 0xC8	; 200
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9c 83       	std	Y+4, r25	; 0x04
    3986:	8b 83       	std	Y+3, r24	; 0x03
    3988:	8b 81       	ldd	r24, Y+3	; 0x03
    398a:	9c 81       	ldd	r25, Y+4	; 0x04
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <main+0x1672>
    3990:	9c 83       	std	Y+4, r25	; 0x04
    3992:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3994:	8d 81       	ldd	r24, Y+5	; 0x05
    3996:	9e 81       	ldd	r25, Y+6	; 0x06
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	9e 83       	std	Y+6, r25	; 0x06
    399c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	9e 81       	ldd	r25, Y+6	; 0x06
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	69 f7       	brne	.-38     	; 0x3980 <main+0x1666>
    39a6:	14 c0       	rjmp	.+40     	; 0x39d0 <main+0x16b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a8:	6f 81       	ldd	r22, Y+7	; 0x07
    39aa:	78 85       	ldd	r23, Y+8	; 0x08
    39ac:	89 85       	ldd	r24, Y+9	; 0x09
    39ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    39b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	9e 83       	std	Y+6, r25	; 0x06
    39ba:	8d 83       	std	Y+5, r24	; 0x05
    39bc:	8d 81       	ldd	r24, Y+5	; 0x05
    39be:	9e 81       	ldd	r25, Y+6	; 0x06
    39c0:	9a 83       	std	Y+2, r25	; 0x02
    39c2:	89 83       	std	Y+1, r24	; 0x01
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	9a 81       	ldd	r25, Y+2	; 0x02
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <main+0x16ae>
    39cc:	9a 83       	std	Y+2, r25	; 0x02
    39ce:	89 83       	std	Y+1, r24	; 0x01
        LCD_Send_String("Infrared:");
	    LCD_Send_Int(infrared_reading);
	    _delay_ms(500);
	    LCD8Bit_Send_Command(0x01);

	    for(u8 i = 0; i<100;i++){
    39d0:	de 01       	movw	r26, r28
    39d2:	ad 52       	subi	r26, 0x2D	; 45
    39d4:	bf 4f       	sbci	r27, 0xFF	; 255
    39d6:	fe 01       	movw	r30, r28
    39d8:	ed 52       	subi	r30, 0x2D	; 45
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	80 81       	ld	r24, Z
    39de:	8f 5f       	subi	r24, 0xFF	; 255
    39e0:	8c 93       	st	X, r24
    39e2:	fe 01       	movw	r30, r28
    39e4:	ed 52       	subi	r30, 0x2D	; 45
    39e6:	ff 4f       	sbci	r31, 0xFF	; 255
    39e8:	80 81       	ld	r24, Z
    39ea:	84 36       	cpi	r24, 0x64	; 100
    39ec:	08 f4       	brcc	.+2      	; 0x39f0 <main+0x16d6>
    39ee:	58 cd       	rjmp	.-1360   	; 0x34a0 <main+0x1186>
    39f0:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <main+0x66>

000039f4 <__vector_1>:

  }

//Emergency Fire Bottom on Interrupt 0
void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    39f4:	1f 92       	push	r1
    39f6:	0f 92       	push	r0
    39f8:	0f b6       	in	r0, 0x3f	; 63
    39fa:	0f 92       	push	r0
    39fc:	11 24       	eor	r1, r1
    39fe:	2f 93       	push	r18
    3a00:	3f 93       	push	r19
    3a02:	4f 93       	push	r20
    3a04:	5f 93       	push	r21
    3a06:	6f 93       	push	r22
    3a08:	7f 93       	push	r23
    3a0a:	8f 93       	push	r24
    3a0c:	9f 93       	push	r25
    3a0e:	af 93       	push	r26
    3a10:	bf 93       	push	r27
    3a12:	ef 93       	push	r30
    3a14:	ff 93       	push	r31
    3a16:	df 93       	push	r29
    3a18:	cf 93       	push	r28
    3a1a:	cd b7       	in	r28, 0x3d	; 61
    3a1c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPin_Value(EmergencyLEDPORT,EmergencyLEDPIN,HIGH);
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	66 e0       	ldi	r22, 0x06	; 6
    3a22:	41 e0       	ldi	r20, 0x01	; 1
    3a24:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
	BuzzerON();
    3a28:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <BuzzerON>


}
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	ff 91       	pop	r31
    3a32:	ef 91       	pop	r30
    3a34:	bf 91       	pop	r27
    3a36:	af 91       	pop	r26
    3a38:	9f 91       	pop	r25
    3a3a:	8f 91       	pop	r24
    3a3c:	7f 91       	pop	r23
    3a3e:	6f 91       	pop	r22
    3a40:	5f 91       	pop	r21
    3a42:	4f 91       	pop	r20
    3a44:	3f 91       	pop	r19
    3a46:	2f 91       	pop	r18
    3a48:	0f 90       	pop	r0
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	0f 90       	pop	r0
    3a4e:	1f 90       	pop	r1
    3a50:	18 95       	reti

00003a52 <__vector_2>:
//Emergency Stop Bottom on Interrupt 1
void __vector_2(void) __attribute__((signal));
void __vector_2(void){
    3a52:	1f 92       	push	r1
    3a54:	0f 92       	push	r0
    3a56:	0f b6       	in	r0, 0x3f	; 63
    3a58:	0f 92       	push	r0
    3a5a:	11 24       	eor	r1, r1
    3a5c:	2f 93       	push	r18
    3a5e:	3f 93       	push	r19
    3a60:	4f 93       	push	r20
    3a62:	5f 93       	push	r21
    3a64:	6f 93       	push	r22
    3a66:	7f 93       	push	r23
    3a68:	8f 93       	push	r24
    3a6a:	9f 93       	push	r25
    3a6c:	af 93       	push	r26
    3a6e:	bf 93       	push	r27
    3a70:	ef 93       	push	r30
    3a72:	ff 93       	push	r31
    3a74:	df 93       	push	r29
    3a76:	cf 93       	push	r28
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPin_Value(EmergencyLEDPORT,EmergencyLEDPIN,LOW);
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	66 e0       	ldi	r22, 0x06	; 6
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	0e 94 70 09 	call	0x12e0	; 0x12e0 <DIO_SetPin_Value>
	BuzzerOFF();
    3a86:	0e 94 ef 10 	call	0x21de	; 0x21de <BuzzerOFF>


}
    3a8a:	cf 91       	pop	r28
    3a8c:	df 91       	pop	r29
    3a8e:	ff 91       	pop	r31
    3a90:	ef 91       	pop	r30
    3a92:	bf 91       	pop	r27
    3a94:	af 91       	pop	r26
    3a96:	9f 91       	pop	r25
    3a98:	8f 91       	pop	r24
    3a9a:	7f 91       	pop	r23
    3a9c:	6f 91       	pop	r22
    3a9e:	5f 91       	pop	r21
    3aa0:	4f 91       	pop	r20
    3aa2:	3f 91       	pop	r19
    3aa4:	2f 91       	pop	r18
    3aa6:	0f 90       	pop	r0
    3aa8:	0f be       	out	0x3f, r0	; 63
    3aaa:	0f 90       	pop	r0
    3aac:	1f 90       	pop	r1
    3aae:	18 95       	reti

00003ab0 <__vector_13>:
void __vector_13(void) __attribute__((signal));
void __vector_13(void) {
    3ab0:	1f 92       	push	r1
    3ab2:	0f 92       	push	r0
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	0f 92       	push	r0
    3ab8:	11 24       	eor	r1, r1
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62

}
    3ac2:	cf 91       	pop	r28
    3ac4:	df 91       	pop	r29
    3ac6:	0f 90       	pop	r0
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	0f 90       	pop	r0
    3acc:	1f 90       	pop	r1
    3ace:	18 95       	reti

00003ad0 <BluetoothRead>:




void BluetoothRead(char *array){
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	00 d0       	rcall	.+0      	; 0x3ad6 <BluetoothRead+0x6>
    3ad6:	00 d0       	rcall	.+0      	; 0x3ad8 <BluetoothRead+0x8>
    3ad8:	cd b7       	in	r28, 0x3d	; 61
    3ada:	de b7       	in	r29, 0x3e	; 62
    3adc:	9c 83       	std	Y+4, r25	; 0x04
    3ade:	8b 83       	std	Y+3, r24	; 0x03
	    u8 i = 0;
    3ae0:	1a 82       	std	Y+2, r1	; 0x02
	    ca = '/';
    3ae2:	8f e2       	ldi	r24, 0x2F	; 47
    3ae4:	80 93 5e 02 	sts	0x025E, r24
    3ae8:	35 c0       	rjmp	.+106    	; 0x3b54 <BluetoothRead+0x84>
		while (ca!='*') {
		ca = UART_Receive();
    3aea:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <UART_Receive>
    3aee:	80 93 5e 02 	sts	0x025E, r24

		if (ca >= '1' && ca <= 'z'){
    3af2:	80 91 5e 02 	lds	r24, 0x025E
    3af6:	81 33       	cpi	r24, 0x31	; 49
    3af8:	b0 f0       	brcs	.+44     	; 0x3b26 <BluetoothRead+0x56>
    3afa:	80 91 5e 02 	lds	r24, 0x025E
    3afe:	8b 37       	cpi	r24, 0x7B	; 123
    3b00:	90 f4       	brcc	.+36     	; 0x3b26 <BluetoothRead+0x56>
		LCD8Bit_Send_Data(ca);
    3b02:	80 91 5e 02 	lds	r24, 0x025E
    3b06:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD8Bit_Send_Data>
		array[i] = ca;
    3b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0c:	28 2f       	mov	r18, r24
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	8b 81       	ldd	r24, Y+3	; 0x03
    3b12:	9c 81       	ldd	r25, Y+4	; 0x04
    3b14:	fc 01       	movw	r30, r24
    3b16:	e2 0f       	add	r30, r18
    3b18:	f3 1f       	adc	r31, r19
    3b1a:	80 91 5e 02 	lds	r24, 0x025E
    3b1e:	80 83       	st	Z, r24
        i++;
    3b20:	8a 81       	ldd	r24, Y+2	; 0x02
    3b22:	8f 5f       	subi	r24, 0xFF	; 255
    3b24:	8a 83       	std	Y+2, r24	; 0x02
		}
		if(ca == '*'){
    3b26:	80 91 5e 02 	lds	r24, 0x025E
    3b2a:	8a 32       	cpi	r24, 0x2A	; 42
    3b2c:	99 f4       	brne	.+38     	; 0x3b54 <BluetoothRead+0x84>
		for(u8 i =0;i<4;i++)
    3b2e:	19 82       	std	Y+1, r1	; 0x01
    3b30:	0e c0       	rjmp	.+28     	; 0x3b4e <BluetoothRead+0x7e>
			LCD8Bit_Send_Data(array[i]);
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	28 2f       	mov	r18, r24
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	e2 0f       	add	r30, r18
    3b40:	f3 1f       	adc	r31, r19
    3b42:	80 81       	ld	r24, Z
    3b44:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD8Bit_Send_Data>
		LCD8Bit_Send_Data(ca);
		array[i] = ca;
        i++;
		}
		if(ca == '*'){
		for(u8 i =0;i<4;i++)
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	8f 5f       	subi	r24, 0xFF	; 255
    3b4c:	89 83       	std	Y+1, r24	; 0x01
    3b4e:	89 81       	ldd	r24, Y+1	; 0x01
    3b50:	84 30       	cpi	r24, 0x04	; 4
    3b52:	78 f3       	brcs	.-34     	; 0x3b32 <BluetoothRead+0x62>


void BluetoothRead(char *array){
	    u8 i = 0;
	    ca = '/';
		while (ca!='*') {
    3b54:	80 91 5e 02 	lds	r24, 0x025E
    3b58:	8a 32       	cpi	r24, 0x2A	; 42
    3b5a:	39 f6       	brne	.-114    	; 0x3aea <BluetoothRead+0x1a>
		for(u8 i =0;i<4;i++)
			LCD8Bit_Send_Data(array[i]);

		}
    }
}
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	cf 91       	pop	r28
    3b66:	df 91       	pop	r29
    3b68:	08 95       	ret

00003b6a <ServoAngle>:

void ServoAngle(s8 angle){
    3b6a:	0f 93       	push	r16
    3b6c:	1f 93       	push	r17
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	0f 92       	push	r0
    3b74:	cd b7       	in	r28, 0x3d	; 61
    3b76:	de b7       	in	r29, 0x3e	; 62
    3b78:	89 83       	std	Y+1, r24	; 0x01
	if(angle>= -90 && angle <= 90)
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
    3b7c:	86 3a       	cpi	r24, 0xA6	; 166
    3b7e:	c4 f1       	brlt	.+112    	; 0x3bf0 <ServoAngle+0x86>
    3b80:	89 81       	ldd	r24, Y+1	; 0x01
    3b82:	8b 35       	cpi	r24, 0x5B	; 91
    3b84:	ac f5       	brge	.+106    	; 0x3bf0 <ServoAngle+0x86>
    OCR1A = ((1000.0/180.0)*(angle+90.0))+1000.0;
    3b86:	0a e4       	ldi	r16, 0x4A	; 74
    3b88:	10 e0       	ldi	r17, 0x00	; 0
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	99 27       	eor	r25, r25
    3b8e:	87 fd       	sbrc	r24, 7
    3b90:	90 95       	com	r25
    3b92:	a9 2f       	mov	r26, r25
    3b94:	b9 2f       	mov	r27, r25
    3b96:	bc 01       	movw	r22, r24
    3b98:	cd 01       	movw	r24, r26
    3b9a:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	bc 01       	movw	r22, r24
    3ba4:	cd 01       	movw	r24, r26
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	44 eb       	ldi	r20, 0xB4	; 180
    3bac:	52 e4       	ldi	r21, 0x42	; 66
    3bae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	bc 01       	movw	r22, r24
    3bb8:	cd 01       	movw	r24, r26
    3bba:	2c e1       	ldi	r18, 0x1C	; 28
    3bbc:	37 ec       	ldi	r19, 0xC7	; 199
    3bbe:	41 eb       	ldi	r20, 0xB1	; 177
    3bc0:	50 e4       	ldi	r21, 0x40	; 64
    3bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	4a e7       	ldi	r20, 0x7A	; 122
    3bd4:	54 e4       	ldi	r21, 0x44	; 68
    3bd6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	bc 01       	movw	r22, r24
    3be0:	cd 01       	movw	r24, r26
    3be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	f8 01       	movw	r30, r16
    3bec:	91 83       	std	Z+1, r25	; 0x01
    3bee:	80 83       	st	Z, r24
    if(OCR1A == 2000)
    3bf0:	ea e4       	ldi	r30, 0x4A	; 74
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	80 81       	ld	r24, Z
    3bf6:	91 81       	ldd	r25, Z+1	; 0x01
    3bf8:	f7 e0       	ldi	r31, 0x07	; 7
    3bfa:	80 3d       	cpi	r24, 0xD0	; 208
    3bfc:	9f 07       	cpc	r25, r31
    3bfe:	31 f4       	brne	.+12     	; 0x3c0c <ServoAngle+0xa2>
    	OCR1A = 1999;
    3c00:	ea e4       	ldi	r30, 0x4A	; 74
    3c02:	f0 e0       	ldi	r31, 0x00	; 0
    3c04:	8f ec       	ldi	r24, 0xCF	; 207
    3c06:	97 e0       	ldi	r25, 0x07	; 7
    3c08:	91 83       	std	Z+1, r25	; 0x01
    3c0a:	80 83       	st	Z, r24
    if(OCR1A == -90)
    3c0c:	ea e4       	ldi	r30, 0x4A	; 74
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	80 81       	ld	r24, Z
    3c12:	91 81       	ldd	r25, Z+1	; 0x01
    3c14:	2f ef       	ldi	r18, 0xFF	; 255
    3c16:	86 3a       	cpi	r24, 0xA6	; 166
    3c18:	92 07       	cpc	r25, r18
    3c1a:	31 f4       	brne	.+12     	; 0x3c28 <ServoAngle+0xbe>
    	OCR1A = 1001;
    3c1c:	ea e4       	ldi	r30, 0x4A	; 74
    3c1e:	f0 e0       	ldi	r31, 0x00	; 0
    3c20:	89 ee       	ldi	r24, 0xE9	; 233
    3c22:	93 e0       	ldi	r25, 0x03	; 3
    3c24:	91 83       	std	Z+1, r25	; 0x01
    3c26:	80 83       	st	Z, r24


}
    3c28:	0f 90       	pop	r0
    3c2a:	cf 91       	pop	r28
    3c2c:	df 91       	pop	r29
    3c2e:	1f 91       	pop	r17
    3c30:	0f 91       	pop	r16
    3c32:	08 95       	ret

00003c34 <__mulsi3>:
    3c34:	62 9f       	mul	r22, r18
    3c36:	d0 01       	movw	r26, r0
    3c38:	73 9f       	mul	r23, r19
    3c3a:	f0 01       	movw	r30, r0
    3c3c:	82 9f       	mul	r24, r18
    3c3e:	e0 0d       	add	r30, r0
    3c40:	f1 1d       	adc	r31, r1
    3c42:	64 9f       	mul	r22, r20
    3c44:	e0 0d       	add	r30, r0
    3c46:	f1 1d       	adc	r31, r1
    3c48:	92 9f       	mul	r25, r18
    3c4a:	f0 0d       	add	r31, r0
    3c4c:	83 9f       	mul	r24, r19
    3c4e:	f0 0d       	add	r31, r0
    3c50:	74 9f       	mul	r23, r20
    3c52:	f0 0d       	add	r31, r0
    3c54:	65 9f       	mul	r22, r21
    3c56:	f0 0d       	add	r31, r0
    3c58:	99 27       	eor	r25, r25
    3c5a:	72 9f       	mul	r23, r18
    3c5c:	b0 0d       	add	r27, r0
    3c5e:	e1 1d       	adc	r30, r1
    3c60:	f9 1f       	adc	r31, r25
    3c62:	63 9f       	mul	r22, r19
    3c64:	b0 0d       	add	r27, r0
    3c66:	e1 1d       	adc	r30, r1
    3c68:	f9 1f       	adc	r31, r25
    3c6a:	bd 01       	movw	r22, r26
    3c6c:	cf 01       	movw	r24, r30
    3c6e:	11 24       	eor	r1, r1
    3c70:	08 95       	ret

00003c72 <__prologue_saves__>:
    3c72:	2f 92       	push	r2
    3c74:	3f 92       	push	r3
    3c76:	4f 92       	push	r4
    3c78:	5f 92       	push	r5
    3c7a:	6f 92       	push	r6
    3c7c:	7f 92       	push	r7
    3c7e:	8f 92       	push	r8
    3c80:	9f 92       	push	r9
    3c82:	af 92       	push	r10
    3c84:	bf 92       	push	r11
    3c86:	cf 92       	push	r12
    3c88:	df 92       	push	r13
    3c8a:	ef 92       	push	r14
    3c8c:	ff 92       	push	r15
    3c8e:	0f 93       	push	r16
    3c90:	1f 93       	push	r17
    3c92:	cf 93       	push	r28
    3c94:	df 93       	push	r29
    3c96:	cd b7       	in	r28, 0x3d	; 61
    3c98:	de b7       	in	r29, 0x3e	; 62
    3c9a:	ca 1b       	sub	r28, r26
    3c9c:	db 0b       	sbc	r29, r27
    3c9e:	0f b6       	in	r0, 0x3f	; 63
    3ca0:	f8 94       	cli
    3ca2:	de bf       	out	0x3e, r29	; 62
    3ca4:	0f be       	out	0x3f, r0	; 63
    3ca6:	cd bf       	out	0x3d, r28	; 61
    3ca8:	09 94       	ijmp

00003caa <__epilogue_restores__>:
    3caa:	2a 88       	ldd	r2, Y+18	; 0x12
    3cac:	39 88       	ldd	r3, Y+17	; 0x11
    3cae:	48 88       	ldd	r4, Y+16	; 0x10
    3cb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cba:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cbc:	b9 84       	ldd	r11, Y+9	; 0x09
    3cbe:	c8 84       	ldd	r12, Y+8	; 0x08
    3cc0:	df 80       	ldd	r13, Y+7	; 0x07
    3cc2:	ee 80       	ldd	r14, Y+6	; 0x06
    3cc4:	fd 80       	ldd	r15, Y+5	; 0x05
    3cc6:	0c 81       	ldd	r16, Y+4	; 0x04
    3cc8:	1b 81       	ldd	r17, Y+3	; 0x03
    3cca:	aa 81       	ldd	r26, Y+2	; 0x02
    3ccc:	b9 81       	ldd	r27, Y+1	; 0x01
    3cce:	ce 0f       	add	r28, r30
    3cd0:	d1 1d       	adc	r29, r1
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	f8 94       	cli
    3cd6:	de bf       	out	0x3e, r29	; 62
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	cd bf       	out	0x3d, r28	; 61
    3cdc:	ed 01       	movw	r28, r26
    3cde:	08 95       	ret

00003ce0 <strcmp>:
    3ce0:	fb 01       	movw	r30, r22
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	8d 91       	ld	r24, X+
    3ce6:	01 90       	ld	r0, Z+
    3ce8:	80 19       	sub	r24, r0
    3cea:	01 10       	cpse	r0, r1
    3cec:	d9 f3       	breq	.-10     	; 0x3ce4 <strcmp+0x4>
    3cee:	99 0b       	sbc	r25, r25
    3cf0:	08 95       	ret

00003cf2 <itoa>:
    3cf2:	fb 01       	movw	r30, r22
    3cf4:	9f 01       	movw	r18, r30
    3cf6:	e8 94       	clt
    3cf8:	42 30       	cpi	r20, 0x02	; 2
    3cfa:	c4 f0       	brlt	.+48     	; 0x3d2c <itoa+0x3a>
    3cfc:	45 32       	cpi	r20, 0x25	; 37
    3cfe:	b4 f4       	brge	.+44     	; 0x3d2c <itoa+0x3a>
    3d00:	4a 30       	cpi	r20, 0x0A	; 10
    3d02:	29 f4       	brne	.+10     	; 0x3d0e <itoa+0x1c>
    3d04:	97 fb       	bst	r25, 7
    3d06:	1e f4       	brtc	.+6      	; 0x3d0e <itoa+0x1c>
    3d08:	90 95       	com	r25
    3d0a:	81 95       	neg	r24
    3d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0e:	64 2f       	mov	r22, r20
    3d10:	77 27       	eor	r23, r23
    3d12:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__udivmodhi4>
    3d16:	80 5d       	subi	r24, 0xD0	; 208
    3d18:	8a 33       	cpi	r24, 0x3A	; 58
    3d1a:	0c f0       	brlt	.+2      	; 0x3d1e <itoa+0x2c>
    3d1c:	89 5d       	subi	r24, 0xD9	; 217
    3d1e:	81 93       	st	Z+, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	a1 f7       	brne	.-24     	; 0x3d0e <itoa+0x1c>
    3d26:	16 f4       	brtc	.+4      	; 0x3d2c <itoa+0x3a>
    3d28:	5d e2       	ldi	r21, 0x2D	; 45
    3d2a:	51 93       	st	Z+, r21
    3d2c:	10 82       	st	Z, r1
    3d2e:	c9 01       	movw	r24, r18
    3d30:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <strrev>

00003d34 <strrev>:
    3d34:	dc 01       	movw	r26, r24
    3d36:	fc 01       	movw	r30, r24
    3d38:	67 2f       	mov	r22, r23
    3d3a:	71 91       	ld	r23, Z+
    3d3c:	77 23       	and	r23, r23
    3d3e:	e1 f7       	brne	.-8      	; 0x3d38 <strrev+0x4>
    3d40:	32 97       	sbiw	r30, 0x02	; 2
    3d42:	04 c0       	rjmp	.+8      	; 0x3d4c <strrev+0x18>
    3d44:	7c 91       	ld	r23, X
    3d46:	6d 93       	st	X+, r22
    3d48:	70 83       	st	Z, r23
    3d4a:	62 91       	ld	r22, -Z
    3d4c:	ae 17       	cp	r26, r30
    3d4e:	bf 07       	cpc	r27, r31
    3d50:	c8 f3       	brcs	.-14     	; 0x3d44 <strrev+0x10>
    3d52:	08 95       	ret

00003d54 <__udivmodhi4>:
    3d54:	aa 1b       	sub	r26, r26
    3d56:	bb 1b       	sub	r27, r27
    3d58:	51 e1       	ldi	r21, 0x11	; 17
    3d5a:	07 c0       	rjmp	.+14     	; 0x3d6a <__udivmodhi4_ep>

00003d5c <__udivmodhi4_loop>:
    3d5c:	aa 1f       	adc	r26, r26
    3d5e:	bb 1f       	adc	r27, r27
    3d60:	a6 17       	cp	r26, r22
    3d62:	b7 07       	cpc	r27, r23
    3d64:	10 f0       	brcs	.+4      	; 0x3d6a <__udivmodhi4_ep>
    3d66:	a6 1b       	sub	r26, r22
    3d68:	b7 0b       	sbc	r27, r23

00003d6a <__udivmodhi4_ep>:
    3d6a:	88 1f       	adc	r24, r24
    3d6c:	99 1f       	adc	r25, r25
    3d6e:	5a 95       	dec	r21
    3d70:	a9 f7       	brne	.-22     	; 0x3d5c <__udivmodhi4_loop>
    3d72:	80 95       	com	r24
    3d74:	90 95       	com	r25
    3d76:	bc 01       	movw	r22, r24
    3d78:	cd 01       	movw	r24, r26
    3d7a:	08 95       	ret

00003d7c <_exit>:
    3d7c:	f8 94       	cli

00003d7e <__stop_program>:
    3d7e:	ff cf       	rjmp	.-2      	; 0x3d7e <__stop_program>
